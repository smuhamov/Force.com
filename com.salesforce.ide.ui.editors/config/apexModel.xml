<?xml version="1.0" encoding="UTF-8"?>
<types>
  <namespace name="system">
    <type name="apexpages">
      <method name="addMessage" isStatic="true" returnType="void">
        <param type="ApexPages.Message" doc="message"/>
      </method>
      <method name="addMessages" isStatic="true" returnType="void">
        <param type="APEX_OBJECT" doc="ex"/>
      </method>
      <method name="currentPage" isStatic="true" returnType="System.PageReference">
      </method>
      <method name="getMessages" isStatic="true" returnType="LIST&lt;ApexPages.Message&gt;">
      </method>
      <method name="hasMessages" isStatic="true" returnType="Boolean">
        <param type="ApexPages.Severity" doc="severity"/>
      </method>
      <method name="hasMessages" isStatic="true" returnType="Boolean">
      </method>
    </type>
    <type name="blob">
      <method name="toPdf" isStatic="true" returnType="Blob" doc="Create a binary object out of the given string, encoding it as a PDF file">
        <param type="String" doc="o"/>
      </method>
      <method name="valueOf" isStatic="true" returnType="Blob" doc="Create a Binary object out of the given string, encoding it using UTF-8">
        <param type="String" doc="o"/>
      </method>
    </type>
    <type name="boolean">
      <method name="valueOf" isStatic="true" returnType="Boolean">
        <param type="Object" doc="a"/>
      </method>
    </type>
    <type name="busop">
      <method name="loginXi" isStatic="true" returnType="Busop.LoginResult">
        <param type="String" doc="targetUser"/>
      </method>
      <method name="updatePartnerLicense" isStatic="true" returnType="void">
        <param type="String" doc="targetUserName"/>
        <param type="String" doc="newStatus"/>
        <param type="Integer" doc="newNumberOfUsers"/>
        <param type="Date" doc="newExpirationDate"/>
        <param type="Date" doc="provisioningDate"/>
      </method>
    </type>
    <type name="currency">
      <method name="newInstance" isStatic="true" returnType="CURRENCY">
        <param type="Decimal" doc="amount"/>
        <param type="String" doc="isoCode"/>
      </method>
    </type>
    <type name="database">
      <method name="convertLead" isStatic="true" returnType="Database.LeadConvertResult" doc="Convert a lead, creating or modifying other records, optionally choosing to leave any successes in the current transaction">
        <param type="Database.LeadConvert" doc="leadConvert"/>
        <param type="Boolean" doc="allOrNothing"/>
      </method>
      <method name="convertLead" isStatic="true" returnType="LIST&lt;Database.LeadConvertResult&gt;" doc="Convert leads, creating or modifying other records, optionally choosing to leave any successes in the current transaction">
        <param type="LIST&lt;Database.LeadConvert&gt;" doc="leadConverts"/>
        <param type="Boolean" doc="allOrNothing"/>
      </method>
      <method name="convertLead" isStatic="true" returnType="Database.LeadConvertResult" doc="Convert a lead, creating or modifying other records">
        <param type="Database.LeadConvert" doc="leadConvert"/>
      </method>
      <method name="convertLead" isStatic="true" returnType="LIST&lt;Database.LeadConvertResult&gt;" doc="Convert leads, creating or modifying other records">
        <param type="LIST&lt;Database.LeadConvert&gt;" doc="leadConverts"/>
      </method>
      <method name="countQuery" isStatic="true" returnType="Integer" doc="dynamic count query result">
        <param type="String" doc="query"/>
      </method>
      <method name="delete" isStatic="true" returnType="Database.DeleteResult" doc="delete an object, returning the api delete results, optionally choosing to leave any successes in the current transaction">
        <param type="Id" doc="id"/>
        <param type="Boolean" doc="allOrNothing"/>
      </method>
      <method name="delete" isStatic="true" returnType="LIST&lt;Database.DeleteResult&gt;" doc="delete a set of objects, returning the api delete results including failures, optionally choosing to leave any successes in the current transaction">
        <param type="LIST&lt;Id&gt;" doc="ids"/>
        <param type="Boolean" doc="allOrNothing"/>
      </method>
      <method name="delete" isStatic="true" returnType="LIST&lt;Database.DeleteResult&gt;" doc="delete a set of objects, returning the api delete results including failures, optionally choosing to leave any successes in the current transaction">
        <param type="LIST&lt;SObject&gt;" doc="sobjects"/>
        <param type="Boolean" doc="allOrNothing"/>
      </method>
      <method name="delete" isStatic="true" returnType="Database.DeleteResult" doc="delete an object, returning the api delete results, optionally choosing to leave any successes in the current transaction">
        <param type="SObject" doc="sobject"/>
        <param type="Boolean" doc="allOrNothing"/>
      </method>
      <method name="delete" isStatic="true" returnType="Database.DeleteResult" doc="delete an object, returning the api delete results">
        <param type="Id" doc="id"/>
      </method>
      <method name="delete" isStatic="true" returnType="LIST&lt;Database.DeleteResult&gt;" doc="delete a set of objects, returning the api delete results including failures">
        <param type="LIST&lt;Id&gt;" doc="ids"/>
      </method>
      <method name="delete" isStatic="true" returnType="LIST&lt;Database.DeleteResult&gt;" doc="delete a set of objects, returning the api delete results including failures">
        <param type="LIST&lt;SObject&gt;" doc="sobjects"/>
      </method>
      <method name="delete" isStatic="true" returnType="Database.DeleteResult" doc="delete an object, returning the api delete results">
        <param type="SObject" doc="sobject"/>
      </method>
      <method name="emptyRecycleBin" isStatic="true" returnType="LIST&lt;Database.EmptyRecycleBinResult&gt;">
        <param type="LIST&lt;Id&gt;" doc="ids"/>
      </method>
      <method name="emptyRecycleBin" isStatic="true" returnType="LIST&lt;Database.EmptyRecycleBinResult&gt;">
        <param type="LIST&lt;SObject&gt;" doc="sobjects"/>
      </method>
      <method name="emptyRecycleBin" isStatic="true" returnType="Database.EmptyRecycleBinResult">
        <param type="SObject" doc="sobject"/>
      </method>
      <method name="executeBatch" isStatic="true" returnType="String" doc="execute a batch job">
        <param type="APEX_OBJECT" doc="batchable"/>
        <param type="Integer" doc="batchSize"/>
      </method>
      <method name="executeBatch" isStatic="true" returnType="String" doc="execute a batch job">
        <param type="APEX_OBJECT" doc="batchable"/>
      </method>
      <method name="getQueryLocator" isStatic="true" returnType="Database.QueryLocator" doc="create a query locator for batch Apex">
        <param type="LIST&lt;SObject&gt;" doc="query"/>
      </method>
      <method name="getQueryLocator" isStatic="true" returnType="Database.QueryLocator" doc="create a query locator for batch Apex">
        <param type="String" doc="query"/>
      </method>
      <method name="insert" isStatic="true" returnType="LIST&lt;Database.SaveResult&gt;" doc="Insert a set of objects, returning the api save results including failures, optionally choosing to leave any successes in the current transaction">
        <param type="LIST&lt;SObject&gt;" doc="sobjects"/>
        <param type="APEX_OBJECT" doc="DmlOptions"/>
      </method>
      <method name="insert" isStatic="true" returnType="LIST&lt;Database.SaveResult&gt;" doc="Insert a set of objects, returning the api save results including failures, optionally choosing to leave any successes in the current transaction">
        <param type="LIST&lt;SObject&gt;" doc="sobjects"/>
        <param type="Boolean" doc="allOrNothing"/>
      </method>
      <method name="insert" isStatic="true" returnType="Database.SaveResult" doc="Insert an object, returning the api save results, optionally choosing to leave any successes in the current transaction">
        <param type="SObject" doc="sobject"/>
        <param type="APEX_OBJECT" doc="DmlOptions"/>
      </method>
      <method name="insert" isStatic="true" returnType="Database.SaveResult" doc="Insert an object, returning the api save results, optionally choosing to leave any successes in the current transaction">
        <param type="SObject" doc="sobject"/>
        <param type="Boolean" doc="allOrNothing"/>
      </method>
      <method name="insert" isStatic="true" returnType="LIST&lt;Database.SaveResult&gt;" doc="Insert a set of objects, returning the api save results including failures">
        <param type="LIST&lt;SObject&gt;" doc="sobjects"/>
      </method>
      <method name="insert" isStatic="true" returnType="Database.SaveResult" doc="Insert an object, returning the api save results">
        <param type="SObject" doc="sobject"/>
      </method>
      <method name="query" isStatic="true" returnType="LIST&lt;SObject&gt;" doc="dynamic SOQL query result">
        <param type="String" doc="query"/>
      </method>
      <method name="rollback" isStatic="true" returnType="void" doc="Restore the database state to a previous savepoint">
        <param type="System.Savepoint" doc="savepoint"/>
      </method>
      <method name="setSavepoint" isStatic="true" returnType="System.Savepoint" doc="Set a database savepoint">
      </method>
      <method name="undelete" isStatic="true" returnType="Database.UndeleteResult" doc="undelete an object, returning the api undelete results, optionally choosing to leave any successes in the current transaction">
        <param type="Id" doc="id"/>
        <param type="Boolean" doc="allOrNothing"/>
      </method>
      <method name="undelete" isStatic="true" returnType="LIST&lt;Database.UndeleteResult&gt;" doc="undelete a set of objects, returning the api undelete results including failures, optionally choosing to leave any successes in the current transaction">
        <param type="LIST&lt;Id&gt;" doc="ids"/>
        <param type="Boolean" doc="allOrNothing"/>
      </method>
      <method name="undelete" isStatic="true" returnType="LIST&lt;Database.UndeleteResult&gt;" doc="undelete a set of objects, returning the api undelete results including failures, optionally choosing to leave any successes in the current transaction">
        <param type="LIST&lt;SObject&gt;" doc="sobjects"/>
        <param type="Boolean" doc="allOrNothing"/>
      </method>
      <method name="undelete" isStatic="true" returnType="Database.UndeleteResult" doc="undelete an object, returning the api delete results, optionally choosing to leave any successes in the current transaction">
        <param type="SObject" doc="sobject"/>
        <param type="Boolean" doc="allOrNothing"/>
      </method>
      <method name="undelete" isStatic="true" returnType="Database.UndeleteResult" doc="undelete an object, returning the api uddelete results upon success">
        <param type="Id" doc="id"/>
      </method>
      <method name="undelete" isStatic="true" returnType="LIST&lt;Database.UndeleteResult&gt;" doc="undelete a set of objects, returning the api undelete results upon success">
        <param type="LIST&lt;Id&gt;" doc="ids"/>
      </method>
      <method name="undelete" isStatic="true" returnType="LIST&lt;Database.UndeleteResult&gt;" doc="undelete a set of objects, returning the api undelete results including failures">
        <param type="LIST&lt;SObject&gt;" doc="sobjects"/>
      </method>
      <method name="undelete" isStatic="true" returnType="Database.UndeleteResult" doc="undelete an object, returning the api delete results">
        <param type="SObject" doc="sobject"/>
      </method>
      <method name="update" isStatic="true" returnType="LIST&lt;Database.SaveResult&gt;" doc="Update a set of objects, returning the api save results including failures">
        <param type="LIST&lt;SObject&gt;" doc="sobjects"/>
        <param type="APEX_OBJECT" doc="allOrNothing"/>
      </method>
      <method name="update" isStatic="true" returnType="LIST&lt;Database.SaveResult&gt;" doc="Update a set of objects, returning the api save results including failures">
        <param type="LIST&lt;SObject&gt;" doc="sobjects"/>
        <param type="Boolean" doc="allOrNothing"/>
      </method>
      <method name="update" isStatic="true" returnType="Database.SaveResult" doc="Update an object, returning the api save results">
        <param type="SObject" doc="sobject"/>
        <param type="APEX_OBJECT" doc="allOrNothing"/>
      </method>
      <method name="update" isStatic="true" returnType="Database.SaveResult" doc="Update an object, returning the api save results">
        <param type="SObject" doc="sobject"/>
        <param type="Boolean" doc="allOrNothing"/>
      </method>
      <method name="update" isStatic="true" returnType="LIST&lt;Database.SaveResult&gt;" doc="Update a set of objects, returning the api save results including failures">
        <param type="LIST&lt;SObject&gt;" doc="sobjects"/>
      </method>
      <method name="update" isStatic="true" returnType="Database.SaveResult" doc="Update an object, returning the api save results">
        <param type="SObject" doc="sobject"/>
      </method>
      <method name="upsert" isStatic="true" returnType="LIST&lt;Database.UpsertResult&gt;" doc="Upsert a set of objects, returning the api upsert results including failures, optionally choosing to leave any successes in the current transaction">
        <param type="LIST&lt;SObject&gt;" doc="sobjects"/>
        <param type="Schema.SObjectField" doc="field"/>
        <param type="Boolean" doc="allOrNothing"/>
      </method>
      <method name="upsert" isStatic="true" returnType="Database.UpsertResult" doc="Upsert an object, returning the api upsert results, optionally choosing to leave any successes in the current transaction">
        <param type="SObject" doc="sobject"/>
        <param type="Schema.SObjectField" doc="field"/>
        <param type="Boolean" doc="allOrNothing"/>
      </method>
      <method name="upsert" isStatic="true" returnType="LIST&lt;Database.UpsertResult&gt;" doc="Upsert a set of objects, returning the api upsert results including failures, optionally choosing to leave any successes in the current transaction">
        <param type="LIST&lt;SObject&gt;" doc="sobjects"/>
        <param type="Boolean" doc="allOrNothing"/>
      </method>
      <method name="upsert" isStatic="true" returnType="LIST&lt;Database.UpsertResult&gt;" doc="Upsert a set of objects, returning the api upsert results including failures">
        <param type="LIST&lt;SObject&gt;" doc="sobjects"/>
        <param type="Schema.SObjectField" doc="field"/>
      </method>
      <method name="upsert" isStatic="true" returnType="Database.UpsertResult" doc="Upsert an object, returning the api upsert results, optionally choosing to leave any successes in the current transaction">
        <param type="SObject" doc="sobject"/>
        <param type="Boolean" doc="allOrNothing"/>
      </method>
      <method name="upsert" isStatic="true" returnType="Database.UpsertResult" doc="Upsert an object, returning the api upsert results">
        <param type="SObject" doc="sobject"/>
        <param type="Schema.SObjectField" doc="field"/>
      </method>
      <method name="upsert" isStatic="true" returnType="LIST&lt;Database.UpsertResult&gt;" doc="Upsert a set of objects, returning the api upsert results including failures">
        <param type="LIST&lt;SObject&gt;" doc="sobjects"/>
      </method>
      <method name="upsert" isStatic="true" returnType="Database.UpsertResult" doc="Upsert an object, returning the api upsert results">
        <param type="SObject" doc="sobject"/>
      </method>
    </type>
    <type name="date">
      <method name="daysInMonth" isStatic="true" returnType="Integer">
        <param type="Integer" doc="year"/>
        <param type="Integer" doc="month"/>
      </method>
      <method name="isLeapYear" isStatic="true" returnType="Boolean">
        <param type="Integer" doc="year"/>
      </method>
      <method name="newInstance" isStatic="true" returnType="Date">
        <param type="Integer" doc="year"/>
        <param type="Integer" doc="month"/>
        <param type="Integer" doc="day"/>
      </method>
      <method name="parse" isStatic="true" returnType="Date">
        <param type="String" doc="str"/>
      </method>
      <method name="today" isStatic="true" returnType="Date" doc="Return the current date">
      </method>
      <method name="valueOf" isStatic="true" returnType="Date">
        <param type="Object" doc="o"/>
      </method>
      <method name="valueOf" isStatic="true" returnType="Date">
        <param type="String" doc="str"/>
      </method>
    </type>
    <type name="datetime">
      <method name="newInstance" isStatic="true" returnType="Datetime">
        <param type="Integer" doc="year"/>
        <param type="Integer" doc="month"/>
        <param type="Integer" doc="day"/>
        <param type="Integer" doc="hour"/>
        <param type="Integer" doc="minute"/>
        <param type="Integer" doc="second"/>
      </method>
      <method name="newInstance" isStatic="true" returnType="Datetime">
        <param type="Integer" doc="year"/>
        <param type="Integer" doc="month"/>
        <param type="Integer" doc="day"/>
      </method>
      <method name="newInstance" isStatic="true" returnType="Datetime" doc="Creates a new Datetime from Date and Time, interpreting them to be given in the local timezone.">
        <param type="Date" doc="date"/>
        <param type="Time" doc="time"/>
      </method>
      <method name="newInstance" isStatic="true" returnType="Datetime">
        <param type="Long" doc="time"/>
      </method>
      <method name="newInstanceGmt" isStatic="true" returnType="Datetime">
        <param type="Integer" doc="year"/>
        <param type="Integer" doc="month"/>
        <param type="Integer" doc="day"/>
        <param type="Integer" doc="hour"/>
        <param type="Integer" doc="minute"/>
        <param type="Integer" doc="second"/>
      </method>
      <method name="newInstanceGmt" isStatic="true" returnType="Datetime">
        <param type="Integer" doc="year"/>
        <param type="Integer" doc="month"/>
        <param type="Integer" doc="day"/>
      </method>
      <method name="newInstanceGmt" isStatic="true" returnType="Datetime" doc="Creates a new Datetime from Date and Time, interpreting them to be given in GMT timezone.">
        <param type="Date" doc="date"/>
        <param type="Time" doc="time"/>
      </method>
      <method name="now" isStatic="true" returnType="Datetime" doc="Return the current dateTime based on a GMT calendar">
      </method>
      <method name="parse" isStatic="true" returnType="Datetime">
        <param type="String" doc="str"/>
      </method>
      <method name="valueOf" isStatic="true" returnType="Datetime">
        <param type="Object" doc="o"/>
      </method>
      <method name="valueOf" isStatic="true" returnType="Datetime">
        <param type="String" doc="str"/>
      </method>
      <method name="valueOfGmt" isStatic="true" returnType="Datetime">
        <param type="String" doc="str"/>
      </method>
    </type>
    <type name="decimal">
      <method name="valueOf" isStatic="true" returnType="Decimal">
        <param type="Double" doc="dbl"/>
      </method>
      <method name="valueOf" isStatic="true" returnType="Decimal">
        <param type="Long" doc="lng"/>
      </method>
      <method name="valueOf" isStatic="true" returnType="Decimal">
        <param type="String" doc="str"/>
      </method>
    </type>
    <type name="double">
      <method name="valueOf" isStatic="true" returnType="Double">
        <param type="Object" doc="o"/>
      </method>
      <method name="valueOf" isStatic="true" returnType="Double">
        <param type="String" doc="str"/>
      </method>
    </type>
    <type name="id">
      <method name="valueOf" isStatic="true" returnType="Id">
        <param type="String" doc="str"/>
      </method>
    </type>
    <type name="integer">
      <method name="valueOf" isStatic="true" returnType="Integer">
        <param type="Object" doc="o"/>
      </method>
      <method name="valueOf" isStatic="true" returnType="Integer">
        <param type="String" doc="i"/>
      </method>
    </type>
    <type name="limits">
      <method name="getAggregateQueries" isStatic="true" returnType="Integer">
      </method>
      <method name="getCallouts" isStatic="true" returnType="Integer">
      </method>
      <method name="getChildRelationshipsDescribes" isStatic="true" returnType="Integer">
      </method>
      <method name="getCpuTime" isStatic="true" returnType="Integer">
      </method>
      <method name="getDmlRows" isStatic="true" returnType="Integer">
      </method>
      <method name="getDmlStatements" isStatic="true" returnType="Integer">
      </method>
      <method name="getEmailInvocations" isStatic="true" returnType="Integer">
      </method>
      <method name="getFieldsDescribes" isStatic="true" returnType="Integer">
      </method>
      <method name="getFindSimilarCalls" isStatic="true" returnType="Integer">
      </method>
      <method name="getFutureCalls" isStatic="true" returnType="Integer">
      </method>
      <method name="getHeapSize" isStatic="true" returnType="Integer">
      </method>
      <method name="getLimitAggregateQueries" isStatic="true" returnType="Integer">
      </method>
      <method name="getLimitCallouts" isStatic="true" returnType="Integer">
      </method>
      <method name="getLimitChildRelationshipsDescribes" isStatic="true" returnType="Integer">
      </method>
      <method name="getLimitCpuTime" isStatic="true" returnType="Integer">
      </method>
      <method name="getLimitDmlRows" isStatic="true" returnType="Integer">
      </method>
      <method name="getLimitDmlStatements" isStatic="true" returnType="Integer">
      </method>
      <method name="getLimitEmailInvocations" isStatic="true" returnType="Integer">
      </method>
      <method name="getLimitFieldsDescribes" isStatic="true" returnType="Integer">
      </method>
      <method name="getLimitFindSimilarCalls" isStatic="true" returnType="Integer">
      </method>
      <method name="getLimitFutureCalls" isStatic="true" returnType="Integer">
      </method>
      <method name="getLimitHeapSize" isStatic="true" returnType="Integer">
      </method>
      <method name="getLimitPicklistDescribes" isStatic="true" returnType="Integer">
      </method>
      <method name="getLimitQueries" isStatic="true" returnType="Integer">
      </method>
      <method name="getLimitQueryLocatorRows" isStatic="true" returnType="Integer">
      </method>
      <method name="getLimitQueryRows" isStatic="true" returnType="Integer">
      </method>
      <method name="getLimitRecordTypesDescribes" isStatic="true" returnType="Integer">
      </method>
      <method name="getLimitRunAs" isStatic="true" returnType="Integer">
      </method>
      <method name="getLimitSavepointRollbacks" isStatic="true" returnType="Integer">
      </method>
      <method name="getLimitSavepoints" isStatic="true" returnType="Integer">
      </method>
      <method name="getLimitScriptStatements" isStatic="true" returnType="Integer">
      </method>
      <method name="getLimitSoslQueries" isStatic="true" returnType="Integer">
      </method>
      <method name="getPicklistDescribes" isStatic="true" returnType="Integer">
      </method>
      <method name="getQueries" isStatic="true" returnType="Integer">
      </method>
      <method name="getQueryLocatorRows" isStatic="true" returnType="Integer">
      </method>
      <method name="getQueryRows" isStatic="true" returnType="Integer">
      </method>
      <method name="getRecordTypesDescribes" isStatic="true" returnType="Integer">
      </method>
      <method name="getRunAs" isStatic="true" returnType="Integer">
      </method>
      <method name="getSavepointRollbacks" isStatic="true" returnType="Integer">
      </method>
      <method name="getSavepoints" isStatic="true" returnType="Integer">
      </method>
      <method name="getScriptStatements" isStatic="true" returnType="Integer">
      </method>
      <method name="getSoslQueries" isStatic="true" returnType="Integer">
      </method>
    </type>
    <type name="long">
      <method name="valueOf" isStatic="true" returnType="Long">
        <param type="String" doc="str"/>
      </method>
    </type>
    <type name="messaging">
      <method name="reserveMassEmailCapacity" isStatic="true" returnType="void" doc="Reserve capacity to send mass emails.">
        <param type="Integer" doc="count"/>
      </method>
      <method name="reserveSingleEmailCapacity" isStatic="true" returnType="void" doc="Reserve capacity to send single emails.">
        <param type="Integer" doc="count"/>
      </method>
      <method name="sendEmail" isStatic="true" returnType="LIST&lt;Messaging.SendEmailResult&gt;" doc="Send email.">
        <param type="LIST&lt;Messaging.Email&gt;" doc="emailMessages"/>
        <param type="Boolean" doc="allOrNothing"/>
      </method>
      <method name="sendEmail" isStatic="true" returnType="LIST&lt;Messaging.SendEmailResult&gt;" doc="Send email.">
        <param type="LIST&lt;Messaging.Email&gt;" doc="emailMessages"/>
      </method>
    </type>
    <type name="schema">
      <method name="describeDataCategoryGroupStructures" isStatic="true" returnType="LIST&lt;Schema.DescribeDataCategoryGroupStructureResult&gt;" doc="Returns the category groups associated to the provided sobjects.">
        <param type="LIST&lt;Schema.DataCategoryGroupSobjectTypePair&gt;" doc="pairs"/>
        <param type="Boolean" doc="topCategoriesOnly"/>
      </method>
      <method name="describeDataCategoryGroups" isStatic="true" returnType="LIST&lt;Schema.DescribeDataCategoryGroupResult&gt;" doc="Returns the category groups associated to the provided sobjects.">
        <param type="LIST&lt;String&gt;" doc="sobjects"/>
      </method>
      <method name="getGlobalDescribe" isStatic="true" returnType="MAP&lt;String,Schema.SObjectType&gt;">
      </method>
    </type>
    <type name="search">
      <method name="query" isStatic="true" returnType="LIST&lt;LIST&lt;SObject&gt;&gt;" doc="dynamic SOSL query result">
        <param type="String" doc="searchQuery"/>
      </method>
    </type>
    <type name="string">
      <method name="escapeSingleQuotes" isStatic="true" returnType="String" doc="Escape the single quotes in the given string - useful for dynamic SOQL for instance">
        <param type="String" doc="s"/>
      </method>
      <method name="format" isStatic="true" returnType="String" doc="Treat the current string as a pattern that should be used for substitution in the same manner as apex:outputText">
        <param type="String" doc="format"/>
        <param type="LIST&lt;String&gt;" doc="arguments"/>
      </method>
      <method name="fromCharArray" isStatic="true" returnType="String" doc="Construct a String from the given integer array">
        <param type="LIST&lt;Integer&gt;" doc="charArr"/>
      </method>
      <method name="valueOf" isStatic="true" returnType="String">
        <param type="Date" doc="d"/>
      </method>
      <method name="valueOf" isStatic="true" returnType="String">
        <param type="Datetime" doc="dt"/>
      </method>
      <method name="valueOf" isStatic="true" returnType="String">
        <param type="Decimal" doc="d"/>
      </method>
      <method name="valueOf" isStatic="true" returnType="String">
        <param type="Double" doc="d"/>
      </method>
      <method name="valueOf" isStatic="true" returnType="String">
        <param type="Integer" doc="i"/>
      </method>
      <method name="valueOf" isStatic="true" returnType="String">
        <param type="Long" doc="l"/>
      </method>
      <method name="valueOf" isStatic="true" returnType="String">
        <param type="Object" doc="o"/>
      </method>
      <method name="valueOfGmt" isStatic="true" returnType="String">
        <param type="Datetime" doc="dt"/>
      </method>
    </type>
    <type name="system">
      <method name="abortJob" isStatic="true" returnType="void" doc="Abort an apex job">
        <param type="String" doc="jobId"/>
      </method>
      <method name="assert" isStatic="true" returnType="void">
        <param type="Boolean" doc="condition"/>
        <param type="ANY" doc="msg"/>
      </method>
      <method name="assert" isStatic="true" returnType="void">
        <param type="Boolean" doc="condition"/>
      </method>
      <method name="assertEquals" isStatic="true" returnType="void">
        <param type="ANY" doc="expected"/>
        <param type="ANY" doc="actual"/>
        <param type="ANY" doc="msg"/>
      </method>
      <method name="assertEquals" isStatic="true" returnType="void">
        <param type="ANY" doc="expected"/>
        <param type="ANY" doc="actual"/>
      </method>
      <method name="assertNotEquals" isStatic="true" returnType="void">
        <param type="ANY" doc="expected"/>
        <param type="ANY" doc="actual"/>
        <param type="ANY" doc="msg"/>
      </method>
      <method name="assertNotEquals" isStatic="true" returnType="void">
        <param type="ANY" doc="expected"/>
        <param type="ANY" doc="actual"/>
      </method>
      <method name="currentPageReference" isStatic="true" returnType="System.PageReference">
      </method>
      <method name="currentTimeMillis" isStatic="true" returnType="Long">
      </method>
      <method name="debug" isStatic="true" returnType="void">
        <param type="APEX_OBJECT" doc="logLevel"/>
        <param type="ANY" doc="o"/>
      </method>
      <method name="debug" isStatic="true" returnType="void">
        <param type="ANY" doc="o"/>
      </method>
      <method name="getApplicationReadWriteMode" isStatic="true" returnType="system.ApplicationReadWriteMode">
      </method>
      <method name="isBatch" isStatic="true" returnType="Boolean">
      </method>
      <method name="isFuture" isStatic="true" returnType="Boolean">
      </method>
      <method name="isScheduled" isStatic="true" returnType="Boolean">
      </method>
      <method name="now" isStatic="true" returnType="Datetime">
      </method>
      <method name="process" isStatic="true" returnType="LIST&lt;Id&gt;" doc="For all the workitem ids passed in, perform the given action">
        <param type="LIST" doc="workitemIds"/>
        <param type="String" doc="action"/>
        <param type="String" doc="commments"/>
        <param type="String" doc="nextApprover"/>
      </method>
      <method name="resetPassword" isStatic="true" returnType="System.ResetPasswordResult">
        <param type="Id" doc="userId"/>
        <param type="Boolean" doc="sendUserEmail"/>
      </method>
      <method name="runAs" isStatic="true" returnType="void">
        <param type="SObject" doc="user"/>
        <param type="ANY" doc="block"/>
      </method>
      <method name="runAs" isStatic="true" returnType="void">
        <param type="Package.Version" doc="version"/>
      </method>
      <method name="schedule" isStatic="true" returnType="String" doc="schedule an apex job">
        <param type="String" doc="jobName"/>
        <param type="String" doc="cronExp"/>
        <param type="APEX_OBJECT" doc="schedulable"/>
      </method>
      <method name="setPassword" isStatic="true" returnType="void">
        <param type="Id" doc="userId"/>
        <param type="String" doc="password"/>
      </method>
      <method name="submit" isStatic="true" returnType="LIST&lt;Id&gt;" doc="Submit all the ids in bulk using the given comment and next approver">
        <param type="LIST" doc="ids"/>
        <param type="String" doc="commments"/>
        <param type="String" doc="nextApprover"/>
      </method>
      <method name="today" isStatic="true" returnType="Date">
      </method>
    </type>
    <type name="time">
      <method name="newInstance" isStatic="true" returnType="Time">
        <param type="Integer" doc="hour"/>
        <param type="Integer" doc="minute"/>
        <param type="Integer" doc="second"/>
        <param type="Integer" doc="millisecond"/>
      </method>
    </type>
    <type name="webservicecallout">
      <method name="invoke" isStatic="true" returnType="void">
        <param type="APEX_OBJECT" doc="stub"/>
        <param type="APEX_OBJECT" doc="request"/>
        <param type="MAP" doc="response"/>
        <param type="LIST" doc="info"/>
      </method>
    </type>
    <type name="System.ListException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="System.AssertException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="System.AsyncException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="System.CalloutException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="System.Cookie">
      <method name="getDomain" isStatic="false" returnType="String" doc="Get cookie domain"/>
      <method name="getMaxAge" isStatic="false" returnType="Integer" doc="Get cookie max age"/>
      <method name="getName" isStatic="false" returnType="String" doc="Get cookie name"/>
      <method name="getPath" isStatic="false" returnType="String" doc="Get cookie path"/>
      <method name="getValue" isStatic="false" returnType="String" doc="Get cookie value"/>
      <method name="isSecure" isStatic="false" returnType="Boolean" doc="Is secure cookie"/>
      <constructor>
        <param type="String"/>
        <param type="String"/>
        <param type="String"/>
        <param type="Integer"/>
        <param type="Boolean"/>
      </constructor>
    <vars>
    </vars>
    </type>
    <type name="System.DmlException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getDmlFieldNames" isStatic="false" returnType="LIST&lt;String&gt;">
        <param type="Integer" doc="index"/>
      </method>
      <method name="getDmlFields" isStatic="false" returnType="LIST&lt;Schema.SObjectField&gt;">
        <param type="Integer" doc="index"/>
      </method>
      <method name="getDmlId" isStatic="false" returnType="String">
        <param type="Integer" doc="index"/>
      </method>
      <method name="getDmlIndex" isStatic="false" returnType="Integer">
        <param type="Integer" doc="index"/>
      </method>
      <method name="getDmlMessage" isStatic="false" returnType="String">
        <param type="Integer" doc="index"/>
      </method>
      <method name="getDmlStatusCode" isStatic="false" returnType="String">
        <param type="Integer" doc="index"/>
      </method>
      <method name="getDmlType" isStatic="false" returnType="system.StatusCode">
        <param type="Integer" doc="index"/>
      </method>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getNumDml" isStatic="false" returnType="Integer"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="System.EmailException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getDmlFieldNames" isStatic="false" returnType="LIST&lt;String&gt;">
        <param type="Integer" doc="index"/>
      </method>
      <method name="getDmlFields" isStatic="false" returnType="LIST&lt;Schema.SObjectField&gt;">
        <param type="Integer" doc="index"/>
      </method>
      <method name="getDmlId" isStatic="false" returnType="String">
        <param type="Integer" doc="index"/>
      </method>
      <method name="getDmlIndex" isStatic="false" returnType="Integer">
        <param type="Integer" doc="index"/>
      </method>
      <method name="getDmlMessage" isStatic="false" returnType="String">
        <param type="Integer" doc="index"/>
      </method>
      <method name="getDmlStatusCode" isStatic="false" returnType="String">
        <param type="Integer" doc="index"/>
      </method>
      <method name="getDmlType" isStatic="false" returnType="system.StatusCode">
        <param type="Integer" doc="index"/>
      </method>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getNumDml" isStatic="false" returnType="Integer"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="Exception" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="System.UnexpectedException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="System.FinalException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="System.FlowException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="System.HandledException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="System.Http">
      <method name="send" isStatic="false" returnType="System.HttpResponse" doc="Send HTTP request to external server">
        <param type="APEX_OBJECT" doc="request"/>
      </method>
      <method name="toString" isStatic="false" returnType="String" doc="Returns a string that displays and identifies this object's properties."/>
      <constructor>
      </constructor>
    <vars>
    </vars>
    </type>
    <type name="System.HttpRequest">
      <method name="getBody" isStatic="false" returnType="String" doc="HTTP body"/>
      <method name="getBodyDocument" isStatic="false" returnType="dom.Document" doc="returns XML body"/>
      <method name="getCompressed" isStatic="false" returnType="Boolean" doc="is compressed"/>
      <method name="getEndpoint" isStatic="false" returnType="String" doc="Endpoint URL of the external server"/>
      <method name="getHeader" isStatic="false" returnType="String" doc="Gets HTTP header for the given key">
        <param type="String" doc="key"/>
      </method>
      <method name="getMethod" isStatic="false" returnType="String" doc="Http request method"/>
      <method name="setBody" isStatic="false" returnType="void" doc="sets HTTP body">
        <param type="String" doc="body"/>
      </method>
      <method name="setBodyDocument" isStatic="false" returnType="void" doc="sets XML body">
        <param type="APEX_OBJECT" doc="body"/>
      </method>
      <method name="setClientCertificate" isStatic="false" returnType="void" doc="sets client certificate and password">
        <param type="String" doc="clientCert"/>
        <param type="String" doc="password"/>
      </method>
      <method name="setClientCertificateName" isStatic="false" returnType="void" doc="sets client certificate name">
        <param type="String" doc="certDevName"/>
      </method>
      <method name="setCompressed" isStatic="false" returnType="void" doc="sets compressed request">
        <param type="Boolean" doc="compressed"/>
      </method>
      <method name="setEndpoint" isStatic="false" returnType="void" doc="sets the endpoint URL of the external server">
        <param type="String" doc="endpoint"/>
      </method>
      <method name="setHeader" isStatic="false" returnType="void" doc="sets HTTP header for this request">
        <param type="String" doc="key"/>
        <param type="String" doc="value"/>
      </method>
      <method name="setMethod" isStatic="false" returnType="void" doc="sets the method type">
        <param type="String" doc="method"/>
      </method>
      <method name="setTimeout" isStatic="false" returnType="void" doc="sets connection and read timeout">
        <param type="Integer" doc="timeout"/>
      </method>
      <method name="toString" isStatic="false" returnType="String" doc="Returns a string that displays and identifies this object's properties."/>
      <constructor>
      </constructor>
    <vars>
    </vars>
    </type>
    <type name="System.HttpResponse">
      <method name="getBody" isStatic="false" returnType="String" doc="HTTP body"/>
      <method name="getBodyDocument" isStatic="false" returnType="dom.Document" doc="HTTP body as XML DOM"/>
      <method name="getHeader" isStatic="false" returnType="String" doc="get HTTP header">
        <param type="String" doc="key"/>
      </method>
      <method name="getHeaderKeys" isStatic="false" returnType="LIST&lt;String&gt;" doc="get HTTP headers"/>
      <method name="getStatus" isStatic="false" returnType="String" doc="HTTP status message"/>
      <method name="getStatusCode" isStatic="false" returnType="Integer" doc="HTTP status code"/>
      <method name="getXmlStreamReader" isStatic="false" returnType="System.XmlStreamReader" doc="HTTP body as XML stream reader"/>
      <method name="setBody" isStatic="false" returnType="void" doc="sets the body">
        <param type="String" doc="body"/>
      </method>
      <method name="setHeader" isStatic="false" returnType="void" doc="sets the header">
        <param type="String" doc="key"/>
        <param type="String" doc="value"/>
      </method>
      <method name="setStatus" isStatic="false" returnType="void" doc="sets the status">
        <param type="String" doc="status"/>
      </method>
      <method name="setStatusCode" isStatic="false" returnType="void" doc="sets the status code">
        <param type="Integer" doc="statusCode"/>
      </method>
      <method name="toString" isStatic="false" returnType="String" doc="Returns a string that displays and identifies this object's properties."/>
      <constructor>
      </constructor>
    <vars>
    </vars>
    </type>
    <type name="System.InvalidParameterValueException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
      <constructor>
        <param type="String"/>
        <param type="String"/>
      </constructor>
    <vars>
    </vars>
    </type>
    <type name="System.InvalidReadOnlyUserDmlException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="System.JSONException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="System.LicenseException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="System.LimitException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="System.ListException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="System.LumenException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="System.LumenHandledException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
      <constructor>
        <param type="String"/>
      </constructor>
    <vars>
    </vars>
    </type>
    <type name="System.MathException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="System.NoAccessException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
      <constructor>
      </constructor>
    <vars>
    </vars>
    </type>
    <type name="System.NoDataFoundException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
      <constructor>
      </constructor>
    <vars>
    </vars>
    </type>
    <type name="System.NoSuchElementException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="System.NullPointerException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
      <constructor>
      </constructor>
    <vars>
    </vars>
    </type>
    <type name="System.PageReference" serializable="true">
      <method name="getAnchor" isStatic="false" returnType="String" doc="The name of the anchor located on the page"/>
      <method name="getContent" isStatic="false" returnType="Blob" doc="The rendered content for the page"/>
      <method name="getContentAsPDF" isStatic="false" returnType="Blob" doc="The rendered content for the page converted to PDF format"/>
      <method name="getCookies" isStatic="false" returnType="MAP&lt;String,System.Cookie&gt;" doc="Get cookies"/>
      <method name="getHeaders" isStatic="false" returnType="MAP&lt;String,String&gt;" doc="The HTTP headers"/>
      <method name="getParameters" isStatic="false" returnType="MAP&lt;String,String&gt;" doc="The query/form parameters"/>
      <method name="getRedirect" isStatic="false" returnType="Boolean" doc="The next page to navigate to will be a redirect and the page state will be reset"/>
      <method name="getUrl" isStatic="false" returnType="String" doc="The url of this page reference"/>
      <method name="setAnchor" isStatic="false" returnType="System.PageReference" doc="The name of the anchor located on the page">
        <param type="String" doc="anchor"/>
      </method>
      <method name="setCookies" isStatic="false" returnType="void" doc="Set cookies">
        <param type="LIST&lt;System.Cookie&gt;" doc="cookies"/>
      </method>
      <method name="setRedirect" isStatic="false" returnType="System.PageReference" doc="The next page to navigate to will be a redirect and the page state will be reset">
        <param type="Boolean" doc="redirect"/>
      </method>
      <constructor>
        <param type="SObject"/>
      </constructor>
      <constructor>
        <param type="String"/>
      </constructor>
    <vars>
    </vars>
    </type>
    <type name="System.ProcedureException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="System.QueryException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="System.RequiredFeatureMissingException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="System.ResetPasswordResult">
      <method name="getPassword" isStatic="false" returnType="String"/>
    <vars>
    </vars>
    </type>
    <type name="System.SearchException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="System.SecurityException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="System.SelectOption" serializable="true">
      <method name="getDisabled" isStatic="false" returnType="Boolean" doc="True if the SelectOption is disabled"/>
      <method name="getEscapeItem" isStatic="false" returnType="Boolean" doc="True if the SelectOption label should be escaped"/>
      <method name="getLabel" isStatic="false" returnType="String" doc="The label for this SelectOption"/>
      <method name="getValue" isStatic="false" returnType="String" doc="The value for this SelectOption"/>
      <method name="setDisabled" isStatic="false" returnType="void" doc="Set the disabled value for this SelectOption">
        <param type="Boolean" doc="disabled"/>
      </method>
      <method name="setEscapeItem" isStatic="false" returnType="void" doc="Set the escapeItem value for this SelectOption">
        <param type="Boolean" doc="disabled"/>
      </method>
      <method name="setLabel" isStatic="false" returnType="void" doc="Set the label for this SelectOption">
        <param type="String" doc="label"/>
      </method>
      <method name="setValue" isStatic="false" returnType="void" doc="Set the value for this SelectOption">
        <param type="String" doc="value"/>
      </method>
      <constructor>
        <param type="String"/>
        <param type="String"/>
        <param type="Boolean"/>
      </constructor>
      <constructor>
        <param type="String"/>
        <param type="String"/>
      </constructor>
    <vars>
    </vars>
    </type>
    <type name="System.SerializationException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="System.SObjectException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="System.StringException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="System.TypeException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="System.UnexpectedException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="System.VisualforceException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="System.XmlException" serializable="true">
      <method name="getCause" isStatic="false" returnType="Exception"/>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="getTypeName" isStatic="false" returnType="String"/>
      <method name="initCause" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="cause"/>
      </method>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String" doc="message"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="System.XmlStreamReader">
      <method name="getAttributeCount" isStatic="false" returnType="Integer" doc="Returns the count of attributes on this START_ELEMENT, this method is only valid on a START_ELEMENT or ATTRIBUTE."/>
      <method name="getAttributeLocalName" isStatic="false" returnType="String" doc="Returns the localName of the attribute at the provided index">
        <param type="Integer" doc="index"/>
      </method>
      <method name="getAttributeNamespace" isStatic="false" returnType="String" doc="Returns the namespace of the attribute at the provided index">
        <param type="Integer" doc="index"/>
      </method>
      <method name="getAttributePrefix" isStatic="false" returnType="String" doc="Returns the prefix of this attribute at the provided index">
        <param type="Integer" doc="index"/>
      </method>
      <method name="getAttributeType" isStatic="false" returnType="String" doc="Returns the XML type of the attribute at the provided index">
        <param type="Integer" doc="index"/>
      </method>
      <method name="getAttributeValue" isStatic="false" returnType="String" doc="Returns the normalized attribute value of the attribute with the namespace and localName If the namespaceURI is null the namespace is not checked for equality">
        <param type="String" doc="namespaceURI"/>
        <param type="String" doc="localName"/>
      </method>
      <method name="getAttributeValueAt" isStatic="false" returnType="String" doc="Returns the value of the attribute at the index">
        <param type="Integer" doc="index"/>
      </method>
      <method name="getEventType" isStatic="false" returnType="system.XmlTag" doc="Returns an integer code that indicates the type of the event the cursor is pointing to."/>
      <method name="getLocalName" isStatic="false" returnType="String" doc="Returns the (local) name of the current event."/>
      <method name="getLocation" isStatic="false" returnType="String" doc=" Return the current location of the processor."/>
      <method name="getNamespace" isStatic="false" returnType="String" doc="If the current event is a START_ELEMENT or END_ELEMENT this method returns the URI of the prefix or the default namespace."/>
      <method name="getNamespaceCount" isStatic="false" returnType="Integer" doc="Returns the count of namespaces declared on this START_ELEMENT or END_ELEMENT, this method is only valid on a START_ELEMENT, END_ELEMENT or NAMESPACE."/>
      <method name="getNamespacePrefix" isStatic="false" returnType="String" doc="Returns the prefix for the namespace declared at the index.">
        <param type="Integer" doc="index"/>
      </method>
      <method name="getNamespaceURI" isStatic="false" returnType="String" doc="If the current event is a START_ELEMENT or END_ELEMENT this method returns the URI of the prefix or the default namespace.">
        <param type="String" doc="prefix"/>
      </method>
      <method name="getNamespaceURIAt" isStatic="false" returnType="String" doc="Returns the uri for the namespace declared at the index.">
        <param type="Integer" doc="index"/>
      </method>
      <method name="getPIData" isStatic="false" returnType="String" doc="Get the data section of a processing instruction"/>
      <method name="getPITarget" isStatic="false" returnType="String" doc="Get the target of a processing instruction"/>
      <method name="getPrefix" isStatic="false" returnType="String" doc=" Returns the prefix of the current event or null if the event does not have a prefix"/>
      <method name="getText" isStatic="false" returnType="String" doc="Returns the current value of the parse event as a string, this returns the string value of a CHARACTERS event, returns the value of a COMMENT, the replacement value for an ENTITY_REFERENCE, the string value of a CDATA section, the string value for a SPACE event, or the String value of the internal subset of the DTD."/>
      <method name="getVersion" isStatic="false" returnType="String" doc="Get the xml version declared on the xml declaration Returns null if none was declared"/>
      <method name="hasName" isStatic="false" returnType="Boolean" doc=" returns true if the current event has a name (is a START_ELEMENT or END_ELEMENT) returns false otherwise"/>
      <method name="hasNext" isStatic="false" returnType="Boolean" doc="Returns true if there are more parsing events and false if there are no more events. This method will return false if the current state of the XMLStreamReader is END_DOCUMENT"/>
      <method name="hasText" isStatic="false" returnType="Boolean" doc="Return true if the current event has text, false otherwise The following events have text: CHARACTERS,DTD ,ENTITY_REFERENCE, COMMENT, SPACE"/>
      <method name="isCharacters" isStatic="false" returnType="Boolean" doc="Returns true if the cursor points to a character data event"/>
      <method name="isEndElement" isStatic="false" returnType="Boolean" doc="Returns true if the cursor points to an end tag (otherwise false)"/>
      <method name="isStartElement" isStatic="false" returnType="Boolean" doc="Returns true if the cursor points to a start tag (otherwise false)"/>
      <method name="isWhitespace" isStatic="false" returnType="Boolean" doc="Returns true if the cursor points to a character data event that consists of all whitespace"/>
      <method name="next" isStatic="false" returnType="Integer" doc="Get next parsing event - a processor may return all contiguous character data in a single chunk, or it may split it into several chunks."/>
      <method name="nextTag" isStatic="false" returnType="Integer" doc="Skips any white space (isWhiteSpace() returns true), COMMENT, or PROCESSING_INSTRUCTION, until a START_ELEMENT or END_ELEMENT is reached."/>
      <method name="setCoalescing" isStatic="false" returnType="void" doc="The property that requires the parser to coalesce adjacent character data sections">
        <param type="Boolean" doc="flag"/>
      </method>
      <method name="setNamespaceAware" isStatic="false" returnType="void" doc="The property used to turn on/off namespace support">
        <param type="Boolean" doc="flag"/>
      </method>
      <method name="toString" isStatic="false" returnType="String" doc="Returns a string that displays and identifies this object's properties."/>
      <constructor>
        <param type="String"/>
      </constructor>
    <vars>
    </vars>
    </type>
    <type name="System.XmlStreamWriter">
      <method name="close" isStatic="false" returnType="void" doc="Close this writer and free any resources associated with the writer."/>
      <method name="getXmlString" isStatic="false" returnType="String" doc="Return the XML stream as a string"/>
      <method name="setDefaultNamespace" isStatic="false" returnType="void" doc="Binds a URI to the default namespace This URI is bound in the scope of the current START_ELEMENT / END_ELEMENT pair.">
        <param type="String" doc="uri"/>
      </method>
      <method name="writeAttribute" isStatic="false" returnType="void" doc="Writes an attribute to the output stream">
        <param type="String" doc="prefix"/>
        <param type="String" doc="namespaceURI"/>
        <param type="String" doc="localName"/>
        <param type="String" doc="value"/>
      </method>
      <method name="writeCData" isStatic="false" returnType="void" doc="Writes a CData section">
        <param type="String" doc="data"/>
      </method>
      <method name="writeCharacters" isStatic="false" returnType="void" doc="Write text to the output">
        <param type="String" doc="text"/>
      </method>
      <method name="writeComment" isStatic="false" returnType="void" doc="Writes an xml comment with the data enclosed">
        <param type="String" doc="data"/>
      </method>
      <method name="writeDefaultNamespace" isStatic="false" returnType="void" doc="Writes the default namespace to the stream">
        <param type="String" doc="namesapceURI"/>
      </method>
      <method name="writeEmptyElement" isStatic="false" returnType="void" doc="Writes an empty element tag to the output">
        <param type="String" doc="prefix"/>
        <param type="String" doc="localName"/>
        <param type="String" doc="namesapceURI"/>
      </method>
      <method name="writeEndDocument" isStatic="false" returnType="void" doc="Closes any start tags and writes corresponding end tags."/>
      <method name="writeEndElement" isStatic="false" returnType="void" doc="Writes an end tag to the output relying on the internal state of the writer to determine the prefix and local name of the event."/>
      <method name="writeNamespace" isStatic="false" returnType="void" doc="Writes a namespace to the output stream If the prefix argument to this method is the empty string, &quot;xmlns&quot;, or null this method will delegate to writeDefaultNamespace">
        <param type="String" doc="prefix"/>
        <param type="String" doc="namesapceURI"/>
      </method>
      <method name="writeProcessingInstruction" isStatic="false" returnType="void" doc="Writes a processing instruction">
        <param type="String" doc="target"/>
        <param type="String" doc="data"/>
      </method>
      <method name="writeStartDocument" isStatic="false" returnType="void" doc="Write the XML Declaration.">
        <param type="String" doc="encoding"/>
        <param type="String" doc="version"/>
      </method>
      <method name="writeStartElement" isStatic="false" returnType="void" doc="Writes a start tag to the output">
        <param type="String" doc="prefix"/>
        <param type="String" doc="localName"/>
        <param type="String" doc="namesapceURI"/>
      </method>
      <constructor>
      </constructor>
    <vars>
    </vars>
    </type>
    <type name="system.Answers" type="CLASS" serializable="true">
      <method name="findSimilar" isStatic="true" returnType="LIST&lt;Id&gt;">
        <param type="SObject"/>
      </method>
      <method name="setBestReply" isStatic="true" returnType="void">
        <param type="String"/>
        <param type="String"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="system.ApexBaseClass" type="CLASS" serializable="true">
      <method name="toString" isStatic="false" returnType="String"/>
    <vars>
    </vars>
    </type>
    <type name="system.ApexBaseException" type="EXCEPTION" serializable="true">
      <method name="getDmlFieldNames" isStatic="false" returnType="LIST&lt;String&gt;">
        <param type="Integer"/>
      </method>
      <method name="getDmlFields" isStatic="false" returnType="LIST&lt;Schema.SObjectField&gt;">
        <param type="Integer"/>
      </method>
      <method name="getDmlId" isStatic="false" returnType="String">
        <param type="Integer"/>
      </method>
      <method name="getDmlIndex" isStatic="false" returnType="Integer">
        <param type="Integer"/>
      </method>
      <method name="getDmlMessage" isStatic="false" returnType="String">
        <param type="Integer"/>
      </method>
      <method name="getDmlStatusCode" isStatic="false" returnType="String">
        <param type="Integer"/>
      </method>
      <method name="getDmlType" isStatic="false" returnType="system.StatusCode">
        <param type="Integer"/>
      </method>
      <method name="getLineNumber" isStatic="false" returnType="Integer"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getNumDml" isStatic="false" returnType="Integer"/>
      <method name="getStackTraceString" isStatic="false" returnType="String"/>
      <method name="setMessage" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="system.AppExchange" type="CLASS" serializable="true">
      <method name="calculateListingPopularity" isStatic="true" returnType="void">
        <param type="String"/>
        <param type="String"/>
      </method>
      <method name="createOrg" isStatic="true" returnType="String">
        <param type="String"/>
        <param type="String"/>
        <param type="String"/>
        <param type="String"/>
        <param type="String"/>
        <param type="String"/>
        <param type="String"/>
        <param type="String"/>
        <param type="Boolean"/>
      </method>
      <method name="createPortalUser" isStatic="true" returnType="Id">
        <param type="SObject"/>
        <param type="String"/>
      </method>
      <method name="createSession" isStatic="true" returnType="String">
        <param type="String"/>
        <param type="String"/>
        <param type="String"/>
        <param type="String"/>
      </method>
      <method name="debug" isStatic="true" returnType="void">
        <param type="String"/>
      </method>
      <method name="getAuthenticatingUrl" isStatic="true" returnType="String">
        <param type="String"/>
      </method>
      <method name="getConfig" isStatic="true" returnType="String">
        <param type="String"/>
        <param type="String"/>
      </method>
      <method name="getCookie" isStatic="true" returnType="String">
        <param type="String"/>
      </method>
      <method name="getCrossInstanceEncryptedHash" isStatic="true" returnType="String">
        <param type="Double"/>
        <param type="String"/>
      </method>
      <method name="getInstalledPackageVersions" isStatic="true" returnType="LIST&lt;String&gt;">
        <param type="String"/>
      </method>
      <method name="getOrgName" isStatic="true" returnType="String">
        <param type="String"/>
      </method>
      <method name="getPackageManifest" isStatic="true" returnType="String">
        <param type="String"/>
      </method>
      <method name="getPortalAdminId" isStatic="true" returnType="String"/>
      <method name="getPortalId" isStatic="true" returnType="String"/>
      <method name="getSiteId" isStatic="true" returnType="String"/>
      <method name="getTrialTemplates" isStatic="true" returnType="LIST&lt;TrialTemplate&gt;">
        <param type="String"/>
        <param type="String"/>
        <param type="String"/>
      </method>
      <method name="isDuplicateUserName" isStatic="true" returnType="Boolean">
        <param type="String"/>
      </method>
      <method name="isGuestUser" isStatic="true" returnType="Boolean"/>
      <method name="movedPermanently" isStatic="true" returnType="void">
        <param type="String"/>
      </method>
      <method name="provisionPackageLicense" isStatic="true" returnType="String">
        <param type="String"/>
        <param type="String"/>
        <param type="Integer"/>
        <param type="Date"/>
        <param type="String"/>
      </method>
      <method name="registerPackageVersion" isStatic="true" returnType="Boolean">
        <param type="String"/>
      </method>
      <method name="setCookie" isStatic="true" returnType="void">
        <param type="String"/>
        <param type="String"/>
        <param type="String"/>
        <param type="Integer"/>
      </method>
      <method name="setCookie" isStatic="true" returnType="void">
        <param type="String"/>
        <param type="String"/>
      </method>
      <method name="setDefaultLicenseTerms" isStatic="true" returnType="void">
        <param type="String"/>
        <param type="String"/>
        <param type="String"/>
        <param type="Integer"/>
        <param type="Integer"/>
      </method>
      <method name="setLicenseManagementOrganization" isStatic="true" returnType="String">
        <param type="String"/>
        <param type="String"/>
        <param type="String"/>
        <param type="String"/>
      </method>
      <method name="stopListingPopularityJob" isStatic="true" returnType="void"/>
      <method name="to15" isStatic="true" returnType="String">
        <param type="String"/>
      </method>
      <method name="to18" isStatic="true" returnType="String">
        <param type="String"/>
      </method>
      <method name="updateSingleAsAdmin" isStatic="true" returnType="Database.SaveResult">
        <param type="SObject"/>
      </method>
      <method name="validateLMAInstalled" isStatic="true" returnType="String">
        <param type="String"/>
        <param type="String"/>
      </method>
      <method name="validateOrgUser" isStatic="true" returnType="String">
        <param type="String"/>
        <param type="String"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="system.ApplicationReadWriteMode" type="ENUM" serializable="true">
      <method name="values" isStatic="false" returnType="LIST&lt;system.ApplicationReadWriteMode&gt;"/>
    <vars>
      <var name="DEFAULT" type="system.ApplicationReadWriteMode"/>
      <var name="READ_ONLY" type="system.ApplicationReadWriteMode"/>
    </vars>
    </type>
    <type name="system.BusinessHours" type="CLASS" serializable="true">
      <method name="add" isStatic="true" returnType="Datetime">
        <param type="Id"/>
        <param type="Datetime"/>
        <param type="Long"/>
      </method>
      <method name="addGmt" isStatic="true" returnType="Datetime">
        <param type="Id"/>
        <param type="Datetime"/>
        <param type="Long"/>
      </method>
      <method name="diff" isStatic="true" returnType="Long">
        <param type="String"/>
        <param type="Datetime"/>
        <param type="Datetime"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="system.Crypto" type="CLASS" serializable="true">
      <method name="decrypt" isStatic="true" returnType="Blob">
        <param type="String"/>
        <param type="Blob"/>
        <param type="Blob"/>
        <param type="Blob"/>
      </method>
      <method name="decryptWithManagedIV" isStatic="true" returnType="Blob">
        <param type="String"/>
        <param type="Blob"/>
        <param type="Blob"/>
      </method>
      <method name="encrypt" isStatic="true" returnType="Blob">
        <param type="String"/>
        <param type="Blob"/>
        <param type="Blob"/>
        <param type="Blob"/>
      </method>
      <method name="encryptWithManagedIV" isStatic="true" returnType="Blob">
        <param type="String"/>
        <param type="Blob"/>
        <param type="Blob"/>
      </method>
      <method name="generateAesKey" isStatic="true" returnType="Blob">
        <param type="Integer"/>
      </method>
      <method name="generateDigest" isStatic="true" returnType="Blob">
        <param type="String"/>
        <param type="Blob"/>
      </method>
      <method name="generateMac" isStatic="true" returnType="Blob">
        <param type="String"/>
        <param type="Blob"/>
        <param type="Blob"/>
      </method>
      <method name="getRandomInteger" isStatic="true" returnType="Integer"/>
      <method name="getRandomLong" isStatic="true" returnType="Long"/>
      <method name="sign" isStatic="true" returnType="Blob">
        <param type="String"/>
        <param type="Blob"/>
        <param type="Blob"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="system.EncodingUtil" type="CLASS" serializable="true">
      <method name="base64Decode" isStatic="true" returnType="Blob">
        <param type="String"/>
      </method>
      <method name="base64Encode" isStatic="true" returnType="String">
        <param type="Blob"/>
      </method>
      <method name="convertToHex" isStatic="true" returnType="String">
        <param type="Blob"/>
      </method>
      <method name="urlDecode" isStatic="true" returnType="String">
        <param type="String"/>
        <param type="String"/>
      </method>
      <method name="urlEncode" isStatic="true" returnType="String">
        <param type="String"/>
        <param type="String"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="system.Ideas" type="CLASS" serializable="true">
      <method name="findSimilar" isStatic="true" returnType="LIST&lt;Id&gt;">
        <param type="SObject"/>
      </method>
      <method name="getAllRecentReplies" isStatic="true" returnType="LIST&lt;Id&gt;">
        <param type="String"/>
        <param type="String"/>
      </method>
      <method name="getReadRecentReplies" isStatic="true" returnType="LIST&lt;Id&gt;">
        <param type="String"/>
        <param type="String"/>
      </method>
      <method name="getUnreadRecentReplies" isStatic="true" returnType="LIST&lt;Id&gt;">
        <param type="String"/>
        <param type="String"/>
      </method>
      <method name="markRead" isStatic="true" returnType="void">
        <param type="String"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="system.Iterable" type="INTERFACE" serializable="true">
      <method name="iterator" isStatic="false" returnType="system.Iterator"/>
    <vars>
    </vars>
    </type>
    <type name="system.Iterator" type="INTERFACE" serializable="true">
      <method name="hasNext" isStatic="false" returnType="Boolean"/>
      <method name="next" isStatic="false" returnType="t"/>
    <vars>
    </vars>
    </type>
    <type name="system.JSON" type="CLASS" serializable="true">
      <method name="createGenerator" isStatic="true" returnType="system.JSONGenerator">
        <param type="Boolean"/>
      </method>
      <method name="createParser" isStatic="true" returnType="system.JSONParser">
        <param type="String"/>
      </method>
      <method name="deserialize" isStatic="true" returnType="Object">
        <param type="String"/>
        <param type="system.Type"/>
      </method>
      <method name="serialize" isStatic="true" returnType="String">
        <param type="Object"/>
      </method>
      <method name="serializePretty" isStatic="true" returnType="String">
        <param type="Object"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="system.JSONGenerator" type="CLASS" serializable="true">
      <method name="close" isStatic="false" returnType="void"/>
      <method name="getAsString" isStatic="false" returnType="String"/>
      <method name="isClosed" isStatic="false" returnType="Boolean"/>
      <method name="writeBlob" isStatic="false" returnType="void">
        <param type="Blob"/>
      </method>
      <method name="writeBlobField" isStatic="false" returnType="void">
        <param type="String"/>
        <param type="Blob"/>
      </method>
      <method name="writeBoolean" isStatic="false" returnType="void">
        <param type="Boolean"/>
      </method>
      <method name="writeBooleanField" isStatic="false" returnType="void">
        <param type="String"/>
        <param type="Boolean"/>
      </method>
      <method name="writeDate" isStatic="false" returnType="void">
        <param type="Date"/>
      </method>
      <method name="writeDateField" isStatic="false" returnType="void">
        <param type="String"/>
        <param type="Date"/>
      </method>
      <method name="writeDateTime" isStatic="false" returnType="void">
        <param type="Datetime"/>
      </method>
      <method name="writeDateTimeField" isStatic="false" returnType="void">
        <param type="String"/>
        <param type="Datetime"/>
      </method>
      <method name="writeEndArray" isStatic="false" returnType="void"/>
      <method name="writeEndObject" isStatic="false" returnType="void"/>
      <method name="writeFieldName" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="writeId" isStatic="false" returnType="void">
        <param type="Id"/>
      </method>
      <method name="writeIdField" isStatic="false" returnType="void">
        <param type="String"/>
        <param type="Id"/>
      </method>
      <method name="writeNull" isStatic="false" returnType="void"/>
      <method name="writeNullField" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="writeNumber" isStatic="false" returnType="void">
        <param type="Decimal"/>
      </method>
      <method name="writeNumber" isStatic="false" returnType="void">
        <param type="Double"/>
      </method>
      <method name="writeNumber" isStatic="false" returnType="void">
        <param type="Integer"/>
      </method>
      <method name="writeNumber" isStatic="false" returnType="void">
        <param type="Long"/>
      </method>
      <method name="writeNumberField" isStatic="false" returnType="void">
        <param type="String"/>
        <param type="Decimal"/>
      </method>
      <method name="writeNumberField" isStatic="false" returnType="void">
        <param type="String"/>
        <param type="Double"/>
      </method>
      <method name="writeNumberField" isStatic="false" returnType="void">
        <param type="String"/>
        <param type="Integer"/>
      </method>
      <method name="writeNumberField" isStatic="false" returnType="void">
        <param type="String"/>
        <param type="Long"/>
      </method>
      <method name="writeObject" isStatic="false" returnType="void">
        <param type="Object"/>
      </method>
      <method name="writeObjectField" isStatic="false" returnType="void">
        <param type="String"/>
        <param type="Object"/>
      </method>
      <method name="writeStartArray" isStatic="false" returnType="void"/>
      <method name="writeStartObject" isStatic="false" returnType="void"/>
      <method name="writeString" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="writeStringField" isStatic="false" returnType="void">
        <param type="String"/>
        <param type="String"/>
      </method>
      <method name="writeTime" isStatic="false" returnType="void">
        <param type="Time"/>
      </method>
      <method name="writeTimeField" isStatic="false" returnType="void">
        <param type="String"/>
        <param type="Time"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="system.JSONParser" type="CLASS" serializable="true">
      <method name="clearCurrentToken" isStatic="false" returnType="void"/>
      <method name="getBlobValue" isStatic="false" returnType="Blob"/>
      <method name="getBooleanValue" isStatic="false" returnType="Boolean"/>
      <method name="getCurrentName" isStatic="false" returnType="String"/>
      <method name="getCurrentToken" isStatic="false" returnType="system.JSONToken"/>
      <method name="getDateTimeValue" isStatic="false" returnType="Datetime"/>
      <method name="getDateValue" isStatic="false" returnType="Date"/>
      <method name="getDecimalValue" isStatic="false" returnType="Decimal"/>
      <method name="getDoubleValue" isStatic="false" returnType="Double"/>
      <method name="getIdValue" isStatic="false" returnType="Id"/>
      <method name="getIntegerValue" isStatic="false" returnType="Integer"/>
      <method name="getLastClearedToken" isStatic="false" returnType="system.JSONToken"/>
      <method name="getLongValue" isStatic="false" returnType="Long"/>
      <method name="getText" isStatic="false" returnType="String"/>
      <method name="getTimeValue" isStatic="false" returnType="Time"/>
      <method name="hasCurrentToken" isStatic="false" returnType="Boolean"/>
      <method name="nextToken" isStatic="false" returnType="system.JSONToken"/>
      <method name="nextValue" isStatic="false" returnType="system.JSONToken"/>
      <method name="readValueAs" isStatic="false" returnType="Object">
        <param type="system.Type"/>
      </method>
      <method name="skipChildren" isStatic="false" returnType="void"/>
    <vars>
    </vars>
    </type>
    <type name="system.JSONToken" type="ENUM" serializable="true">
      <method name="values" isStatic="false" returnType="LIST&lt;system.JSONToken&gt;"/>
    <vars>
      <var name="END_ARRAY" type="system.JSONToken"/>
      <var name="END_OBJECT" type="system.JSONToken"/>
      <var name="FIELD_NAME" type="system.JSONToken"/>
      <var name="NOT_AVAILABLE" type="system.JSONToken"/>
      <var name="START_ARRAY" type="system.JSONToken"/>
      <var name="START_OBJECT" type="system.JSONToken"/>
      <var name="VALUE_EMBEDDED_OBJECT" type="system.JSONToken"/>
      <var name="VALUE_FALSE" type="system.JSONToken"/>
      <var name="VALUE_NULL" type="system.JSONToken"/>
      <var name="VALUE_NUMBER_FLOAT" type="system.JSONToken"/>
      <var name="VALUE_NUMBER_INT" type="system.JSONToken"/>
      <var name="VALUE_STRING" type="system.JSONToken"/>
      <var name="VALUE_TRUE" type="system.JSONToken"/>
    </vars>
    </type>
    <type name="system.LoggingLevel" type="ENUM" serializable="true">
      <method name="values" isStatic="false" returnType="LIST&lt;system.LoggingLevel&gt;"/>
    <vars>
      <var name="DEBUG" type="system.LoggingLevel"/>
      <var name="ERROR" type="system.LoggingLevel"/>
      <var name="FINE" type="system.LoggingLevel"/>
      <var name="FINER" type="system.LoggingLevel"/>
      <var name="FINEST" type="system.LoggingLevel"/>
      <var name="INFO" type="system.LoggingLevel"/>
      <var name="INTERNAL" type="system.LoggingLevel"/>
      <var name="WARN" type="system.LoggingLevel"/>
    </vars>
    </type>
    <type name="system.Matcher" type="CLASS" serializable="true">
      <method name="end" isStatic="false" returnType="Integer">
        <param type="Integer"/>
      </method>
      <method name="end" isStatic="false" returnType="Integer"/>
      <method name="find" isStatic="false" returnType="Boolean">
        <param type="Integer"/>
      </method>
      <method name="find" isStatic="false" returnType="Boolean"/>
      <method name="group" isStatic="false" returnType="String">
        <param type="Integer"/>
      </method>
      <method name="group" isStatic="false" returnType="String"/>
      <method name="groupCount" isStatic="false" returnType="Integer"/>
      <method name="hasAnchoringBounds" isStatic="false" returnType="Boolean"/>
      <method name="hasTransparentBounds" isStatic="false" returnType="Boolean"/>
      <method name="hitEnd" isStatic="false" returnType="Boolean"/>
      <method name="lookingAt" isStatic="false" returnType="Boolean"/>
      <method name="matches" isStatic="false" returnType="Boolean"/>
      <method name="pattern" isStatic="false" returnType="system.Pattern"/>
      <method name="quoteReplacement" isStatic="true" returnType="String">
        <param type="String"/>
      </method>
      <method name="region" isStatic="false" returnType="system.Matcher">
        <param type="Integer"/>
        <param type="Integer"/>
      </method>
      <method name="regionEnd" isStatic="false" returnType="Integer"/>
      <method name="regionStart" isStatic="false" returnType="Integer"/>
      <method name="replaceAll" isStatic="false" returnType="String">
        <param type="String"/>
      </method>
      <method name="replaceFirst" isStatic="false" returnType="String">
        <param type="String"/>
      </method>
      <method name="requireEnd" isStatic="false" returnType="Boolean"/>
      <method name="reset" isStatic="false" returnType="system.Matcher">
        <param type="String"/>
      </method>
      <method name="reset" isStatic="false" returnType="system.Matcher"/>
      <method name="start" isStatic="false" returnType="Integer">
        <param type="Integer"/>
      </method>
      <method name="start" isStatic="false" returnType="Integer"/>
      <method name="useAnchoringBounds" isStatic="false" returnType="system.Matcher">
        <param type="Boolean"/>
      </method>
      <method name="usePattern" isStatic="false" returnType="system.Matcher">
        <param type="system.Pattern"/>
      </method>
      <method name="useTransparentBounds" isStatic="false" returnType="system.Matcher">
        <param type="Boolean"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="system.Math" type="CLASS" serializable="true">
      <method name="abs" isStatic="true" returnType="Decimal">
        <param type="Decimal"/>
      </method>
      <method name="abs" isStatic="true" returnType="Double">
        <param type="Double"/>
      </method>
      <method name="abs" isStatic="true" returnType="Integer">
        <param type="Integer"/>
      </method>
      <method name="abs" isStatic="true" returnType="Long">
        <param type="Long"/>
      </method>
      <method name="acos" isStatic="true" returnType="Decimal">
        <param type="Decimal"/>
      </method>
      <method name="acos" isStatic="true" returnType="Double">
        <param type="Double"/>
      </method>
      <method name="asin" isStatic="true" returnType="Decimal">
        <param type="Decimal"/>
      </method>
      <method name="asin" isStatic="true" returnType="Double">
        <param type="Double"/>
      </method>
      <method name="atan" isStatic="true" returnType="Decimal">
        <param type="Decimal"/>
      </method>
      <method name="atan" isStatic="true" returnType="Double">
        <param type="Double"/>
      </method>
      <method name="atan2" isStatic="true" returnType="Decimal">
        <param type="Decimal"/>
        <param type="Decimal"/>
      </method>
      <method name="atan2" isStatic="true" returnType="Double">
        <param type="Double"/>
        <param type="Double"/>
      </method>
      <method name="cbrt" isStatic="true" returnType="Decimal">
        <param type="Decimal"/>
      </method>
      <method name="cbrt" isStatic="true" returnType="Double">
        <param type="Double"/>
      </method>
      <method name="ceil" isStatic="true" returnType="Decimal">
        <param type="Decimal"/>
      </method>
      <method name="ceil" isStatic="true" returnType="Double">
        <param type="Double"/>
      </method>
      <method name="cos" isStatic="true" returnType="Decimal">
        <param type="Decimal"/>
      </method>
      <method name="cos" isStatic="true" returnType="Double">
        <param type="Double"/>
      </method>
      <method name="cosh" isStatic="true" returnType="Decimal">
        <param type="Decimal"/>
      </method>
      <method name="cosh" isStatic="true" returnType="Double">
        <param type="Double"/>
      </method>
      <method name="exp" isStatic="true" returnType="Decimal">
        <param type="Decimal"/>
      </method>
      <method name="exp" isStatic="true" returnType="Double">
        <param type="Double"/>
      </method>
      <method name="floor" isStatic="true" returnType="Decimal">
        <param type="Decimal"/>
      </method>
      <method name="floor" isStatic="true" returnType="Double">
        <param type="Double"/>
      </method>
      <method name="log" isStatic="true" returnType="Decimal">
        <param type="Decimal"/>
      </method>
      <method name="log" isStatic="true" returnType="Double">
        <param type="Double"/>
      </method>
      <method name="log10" isStatic="true" returnType="Decimal">
        <param type="Decimal"/>
      </method>
      <method name="log10" isStatic="true" returnType="Double">
        <param type="Double"/>
      </method>
      <method name="max" isStatic="true" returnType="Decimal">
        <param type="Decimal"/>
        <param type="Decimal"/>
      </method>
      <method name="max" isStatic="true" returnType="Double">
        <param type="Double"/>
        <param type="Double"/>
      </method>
      <method name="max" isStatic="true" returnType="Integer">
        <param type="Integer"/>
        <param type="Integer"/>
      </method>
      <method name="max" isStatic="true" returnType="Long">
        <param type="Long"/>
        <param type="Long"/>
      </method>
      <method name="min" isStatic="true" returnType="Decimal">
        <param type="Decimal"/>
        <param type="Decimal"/>
      </method>
      <method name="min" isStatic="true" returnType="Double">
        <param type="Double"/>
        <param type="Double"/>
      </method>
      <method name="min" isStatic="true" returnType="Integer">
        <param type="Integer"/>
        <param type="Integer"/>
      </method>
      <method name="min" isStatic="true" returnType="Long">
        <param type="Long"/>
        <param type="Long"/>
      </method>
      <method name="mod" isStatic="true" returnType="Integer">
        <param type="Integer"/>
        <param type="Integer"/>
      </method>
      <method name="mod" isStatic="true" returnType="Long">
        <param type="Long"/>
        <param type="Long"/>
      </method>
      <method name="pow" isStatic="true" returnType="Double">
        <param type="Double"/>
        <param type="Double"/>
      </method>
      <method name="random" isStatic="true" returnType="Double"/>
      <method name="rint" isStatic="true" returnType="Decimal">
        <param type="Decimal"/>
      </method>
      <method name="rint" isStatic="true" returnType="Double">
        <param type="Double"/>
      </method>
      <method name="round" isStatic="true" returnType="Integer">
        <param type="Decimal"/>
      </method>
      <method name="round" isStatic="true" returnType="Integer">
        <param type="Double"/>
      </method>
      <method name="roundToLong" isStatic="true" returnType="Long">
        <param type="Decimal"/>
      </method>
      <method name="roundToLong" isStatic="true" returnType="Long">
        <param type="Double"/>
      </method>
      <method name="signum" isStatic="true" returnType="Decimal">
        <param type="Decimal"/>
      </method>
      <method name="signum" isStatic="true" returnType="Double">
        <param type="Double"/>
      </method>
      <method name="sin" isStatic="true" returnType="Decimal">
        <param type="Decimal"/>
      </method>
      <method name="sin" isStatic="true" returnType="Double">
        <param type="Double"/>
      </method>
      <method name="sinh" isStatic="true" returnType="Decimal">
        <param type="Decimal"/>
      </method>
      <method name="sinh" isStatic="true" returnType="Double">
        <param type="Double"/>
      </method>
      <method name="sqrt" isStatic="true" returnType="Decimal">
        <param type="Decimal"/>
      </method>
      <method name="sqrt" isStatic="true" returnType="Double">
        <param type="Double"/>
      </method>
      <method name="tan" isStatic="true" returnType="Decimal">
        <param type="Decimal"/>
      </method>
      <method name="tan" isStatic="true" returnType="Double">
        <param type="Double"/>
      </method>
      <method name="tanh" isStatic="true" returnType="Decimal">
        <param type="Decimal"/>
      </method>
      <method name="tanh" isStatic="true" returnType="Double">
        <param type="Double"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="system.Navigator" type="INTERFACE" serializable="true">
      <method name="execute" isStatic="false" returnType="System.PageReference">
        <param type="system.NavigatorContext"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="system.NavigatorContext" type="INTERFACE" serializable="true">
      <method name="getCurrentObjectVersion" isStatic="false" returnType="SObject"/>
    <vars>
    </vars>
    </type>
    <type name="system.NavigatorContextImpl" type="CLASS" serializable="true">
      <method name="getCurrentObjectVersion" isStatic="false" returnType="SObject"/>
    <vars>
    </vars>
    </type>
    <type name="system.Pattern" type="CLASS" serializable="true">
      <method name="compile" isStatic="true" returnType="system.Pattern">
        <param type="String"/>
      </method>
      <method name="matcher" isStatic="false" returnType="system.Matcher">
        <param type="String"/>
      </method>
      <method name="matches" isStatic="true" returnType="Boolean">
        <param type="String"/>
        <param type="String"/>
      </method>
      <method name="pattern" isStatic="false" returnType="String"/>
      <method name="quote" isStatic="true" returnType="String">
        <param type="String"/>
      </method>
      <method name="split" isStatic="false" returnType="LIST&lt;String&gt;">
        <param type="String"/>
        <param type="Integer"/>
      </method>
      <method name="split" isStatic="false" returnType="LIST&lt;String&gt;">
        <param type="String"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="system.RestRequest" type="CLASS" serializable="true">
      <method name="addHeader" isStatic="false" returnType="void">
        <param type="String"/>
        <param type="String"/>
      </method>
      <method name="addParameter" isStatic="false" returnType="void">
        <param type="String"/>
        <param type="String"/>
      </method>
      <constructor/>
    <vars>
      <var name="headers" type="MAP&lt;String,String&gt;"/>
      <var name="httpMethod" type="String"/>
      <var name="params" type="MAP&lt;String,String&gt;"/>
      <var name="remoteAddress" type="String"/>
      <var name="requestBody" type="Blob"/>
      <var name="requestURI" type="String"/>
      <var name="resourcePath" type="String"/>
    </vars>
    </type>
    <type name="system.RestResponse" type="CLASS" serializable="true">
      <method name="addHeader" isStatic="false" returnType="void">
        <param type="String"/>
        <param type="String"/>
      </method>
      <constructor/>
    <vars>
      <var name="headers" type="MAP&lt;String,String&gt;"/>
      <var name="responseBody" type="Blob"/>
      <var name="statusCode" type="Integer"/>
    </vars>
    </type>
    <type name="system.RoundingMode" type="ENUM" serializable="true">
      <method name="values" isStatic="false" returnType="LIST&lt;system.RoundingMode&gt;"/>
    <vars>
      <var name="CEILING" type="system.RoundingMode"/>
      <var name="DOWN" type="system.RoundingMode"/>
      <var name="FLOOR" type="system.RoundingMode"/>
      <var name="HALF_DOWN" type="system.RoundingMode"/>
      <var name="HALF_EVEN" type="system.RoundingMode"/>
      <var name="HALF_UP" type="system.RoundingMode"/>
      <var name="UNNECESSARY" type="system.RoundingMode"/>
      <var name="UP" type="system.RoundingMode"/>
    </vars>
    </type>
    <type name="system.Schedulable" type="INTERFACE" serializable="true">
      <method name="execute" isStatic="false" returnType="void">
        <param type="system.SchedulableContext"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="system.SchedulableContext" type="INTERFACE" serializable="true">
      <method name="getTriggerId" isStatic="false" returnType="Id"/>
    <vars>
    </vars>
    </type>
    <type name="system.SetupScope" type="ENUM" serializable="true">
      <method name="values" isStatic="false" returnType="LIST&lt;system.SetupScope&gt;"/>
    <vars>
      <var name="ORGANIZATION" type="system.SetupScope"/>
      <var name="PROFILE" type="system.SetupScope"/>
      <var name="USER" type="system.SetupScope"/>
    </vars>
    </type>
    <type name="system.Site" type="CLASS" serializable="true">
      <method name="changePassword" isStatic="true" returnType="System.PageReference">
        <param type="String"/>
        <param type="String"/>
        <param type="String"/>
      </method>
      <method name="changePassword" isStatic="true" returnType="System.PageReference">
        <param type="String"/>
        <param type="String"/>
      </method>
      <method name="createPersonAccountPortalUser" isStatic="true" returnType="Id">
        <param type="SObject"/>
        <param type="String"/>
        <param type="String"/>
        <param type="String"/>
      </method>
      <method name="createPersonAccountPortalUser" isStatic="true" returnType="Id">
        <param type="SObject"/>
        <param type="String"/>
        <param type="String"/>
      </method>
      <method name="createPortalUser" isStatic="true" returnType="Id">
        <param type="SObject"/>
        <param type="String"/>
        <param type="String"/>
        <param type="Boolean"/>
      </method>
      <method name="createPortalUser" isStatic="true" returnType="Id">
        <param type="SObject"/>
        <param type="String"/>
        <param type="String"/>
      </method>
      <method name="createPortalUser" isStatic="true" returnType="Id">
        <param type="SObject"/>
        <param type="String"/>
      </method>
      <method name="forgotPassword" isStatic="true" returnType="Boolean">
        <param type="String"/>
      </method>
      <method name="getAdminEmail" isStatic="true" returnType="String"/>
      <method name="getAdminId" isStatic="true" returnType="Id"/>
      <method name="getAnalyticsTrackingCode" isStatic="true" returnType="String"/>
      <method name="getCurrentSiteUrl" isStatic="true" returnType="String"/>
      <method name="getCustomWebAddress" isStatic="true" returnType="String"/>
      <method name="getDomain" isStatic="true" returnType="String"/>
      <method name="getErrorDescription" isStatic="true" returnType="String"/>
      <method name="getErrorMessage" isStatic="true" returnType="String"/>
      <method name="getName" isStatic="true" returnType="String"/>
      <method name="getOriginalUrl" isStatic="true" returnType="String"/>
      <method name="getPrefix" isStatic="true" returnType="String"/>
      <method name="getTemplate" isStatic="true" returnType="System.PageReference"/>
      <method name="isLoginEnabled" isStatic="true" returnType="Boolean"/>
      <method name="isPasswordExpired" isStatic="true" returnType="Boolean"/>
      <method name="isRegistrationEnabled" isStatic="true" returnType="Boolean"/>
      <method name="login" isStatic="true" returnType="System.PageReference">
        <param type="String"/>
        <param type="String"/>
        <param type="String"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="system.StatusCode" type="ENUM" serializable="true">
      <method name="values" isStatic="false" returnType="LIST&lt;system.StatusCode&gt;"/>
    <vars>
      <var name="ALL_OR_NONE_OPERATION_ROLLED_BACK" type="system.StatusCode"/>
      <var name="ALREADY_IN_PROCESS" type="system.StatusCode"/>
      <var name="ASSIGNEE_TYPE_REQUIRED" type="system.StatusCode"/>
      <var name="BAD_CUSTOM_ENTITY_PARENT_DOMAIN" type="system.StatusCode"/>
      <var name="BCC_NOT_ALLOWED_IF_BCC_COMPLIANCE_ENABLED" type="system.StatusCode"/>
      <var name="CANNOT_CASCADE_PRODUCT_ACTIVE" type="system.StatusCode"/>
      <var name="CANNOT_CHANGE_FIELD_TYPE_OF_APEX_REFERENCED_FIELD" type="system.StatusCode"/>
      <var name="CANNOT_CREATE_ANOTHER_MANAGED_PACKAGE" type="system.StatusCode"/>
      <var name="CANNOT_DEACTIVATE_DIVISION" type="system.StatusCode"/>
      <var name="CANNOT_DELETE_LAST_DATED_CONVERSION_RATE" type="system.StatusCode"/>
      <var name="CANNOT_DELETE_MANAGED_OBJECT" type="system.StatusCode"/>
      <var name="CANNOT_DISABLE_LAST_ADMIN" type="system.StatusCode"/>
      <var name="CANNOT_ENABLE_IP_RESTRICT_REQUESTS" type="system.StatusCode"/>
      <var name="CANNOT_INSERT_UPDATE_ACTIVATE_ENTITY" type="system.StatusCode"/>
      <var name="CANNOT_MODIFY_MANAGED_OBJECT" type="system.StatusCode"/>
      <var name="CANNOT_RENAME_APEX_REFERENCED_FIELD" type="system.StatusCode"/>
      <var name="CANNOT_RENAME_APEX_REFERENCED_OBJECT" type="system.StatusCode"/>
      <var name="CANNOT_REPARENT_RECORD" type="system.StatusCode"/>
      <var name="CANNOT_UPDATE_CONVERTED_LEAD" type="system.StatusCode"/>
      <var name="CANT_DISABLE_CORP_CURRENCY" type="system.StatusCode"/>
      <var name="CANT_UNSET_CORP_CURRENCY" type="system.StatusCode"/>
      <var name="CHILD_SHARE_FAILS_PARENT" type="system.StatusCode"/>
      <var name="CIRCULAR_DEPENDENCY" type="system.StatusCode"/>
      <var name="COMMUNITY_NOT_ACCESSIBLE" type="system.StatusCode"/>
      <var name="CUSTOM_CLOB_FIELD_LIMIT_EXCEEDED" type="system.StatusCode"/>
      <var name="CUSTOM_ENTITY_OR_FIELD_LIMIT" type="system.StatusCode"/>
      <var name="CUSTOM_FIELD_INDEX_LIMIT_EXCEEDED" type="system.StatusCode"/>
      <var name="CUSTOM_INDEX_EXISTS" type="system.StatusCode"/>
      <var name="CUSTOM_LINK_LIMIT_EXCEEDED" type="system.StatusCode"/>
      <var name="CUSTOM_TAB_LIMIT_EXCEEDED" type="system.StatusCode"/>
      <var name="DELETE_FAILED" type="system.StatusCode"/>
      <var name="DELETE_REQUIRED_ON_CASCADE" type="system.StatusCode"/>
      <var name="DEPENDENCY_EXISTS" type="system.StatusCode"/>
      <var name="DUPLICATE_CASE_SOLUTION" type="system.StatusCode"/>
      <var name="DUPLICATE_COMM_NICKNAME" type="system.StatusCode"/>
      <var name="DUPLICATE_CUSTOM_ENTITY_DEFINITION" type="system.StatusCode"/>
      <var name="DUPLICATE_CUSTOM_TAB_MOTIF" type="system.StatusCode"/>
      <var name="DUPLICATE_DEVELOPER_NAME" type="system.StatusCode"/>
      <var name="DUPLICATE_EXTERNAL_ID" type="system.StatusCode"/>
      <var name="DUPLICATE_MASTER_LABEL" type="system.StatusCode"/>
      <var name="DUPLICATE_SENDER_DISPLAY_NAME" type="system.StatusCode"/>
      <var name="DUPLICATE_USERNAME" type="system.StatusCode"/>
      <var name="DUPLICATE_VALUE" type="system.StatusCode"/>
      <var name="EMAIL_NOT_PROCESSED_DUE_TO_PRIOR_ERROR" type="system.StatusCode"/>
      <var name="EMPTY_SCONTROL_FILE_NAME" type="system.StatusCode"/>
      <var name="ENTITY_FAILED_IFLASTMODIFIED_ON_UPDATE" type="system.StatusCode"/>
      <var name="ENTITY_IS_ARCHIVED" type="system.StatusCode"/>
      <var name="ENTITY_IS_DELETED" type="system.StatusCode"/>
      <var name="ENTITY_IS_LOCKED" type="system.StatusCode"/>
      <var name="ERROR_IN_MAILER" type="system.StatusCode"/>
      <var name="FAILED_ACTIVATION" type="system.StatusCode"/>
      <var name="FIELD_CUSTOM_VALIDATION_EXCEPTION" type="system.StatusCode"/>
      <var name="FIELD_FILTER_VALIDATION_EXCEPTION" type="system.StatusCode"/>
      <var name="FIELD_INTEGRITY_EXCEPTION" type="system.StatusCode"/>
      <var name="FILTERED_LOOKUP_LIMIT_EXCEEDED" type="system.StatusCode"/>
      <var name="HTML_FILE_UPLOAD_NOT_ALLOWED" type="system.StatusCode"/>
      <var name="IMAGE_TOO_LARGE" type="system.StatusCode"/>
      <var name="INACTIVE_OWNER_OR_USER" type="system.StatusCode"/>
      <var name="INSUFFICIENT_ACCESS_ON_CROSS_REFERENCE_ENTITY" type="system.StatusCode"/>
      <var name="INSUFFICIENT_ACCESS_OR_READONLY" type="system.StatusCode"/>
      <var name="INVALID_ACCESS_LEVEL" type="system.StatusCode"/>
      <var name="INVALID_ARGUMENT_TYPE" type="system.StatusCode"/>
      <var name="INVALID_ASSIGNEE_TYPE" type="system.StatusCode"/>
      <var name="INVALID_ASSIGNMENT_RULE" type="system.StatusCode"/>
      <var name="INVALID_BATCH_OPERATION" type="system.StatusCode"/>
      <var name="INVALID_CONTENT_TYPE" type="system.StatusCode"/>
      <var name="INVALID_CREDIT_CARD_INFO" type="system.StatusCode"/>
      <var name="INVALID_CROSS_REFERENCE_KEY" type="system.StatusCode"/>
      <var name="INVALID_CROSS_REFERENCE_TYPE_FOR_FIELD" type="system.StatusCode"/>
      <var name="INVALID_CURRENCY_CONV_RATE" type="system.StatusCode"/>
      <var name="INVALID_CURRENCY_CORP_RATE" type="system.StatusCode"/>
      <var name="INVALID_CURRENCY_ISO" type="system.StatusCode"/>
      <var name="INVALID_DATA_CATEGORY_GROUP_REFERENCE" type="system.StatusCode"/>
      <var name="INVALID_DATA_URI" type="system.StatusCode"/>
      <var name="INVALID_EMAIL_ADDRESS" type="system.StatusCode"/>
      <var name="INVALID_EMPTY_KEY_OWNER" type="system.StatusCode"/>
      <var name="INVALID_FIELD" type="system.StatusCode"/>
      <var name="INVALID_FIELD_FOR_INSERT_UPDATE" type="system.StatusCode"/>
      <var name="INVALID_FIELD_WHEN_USING_TEMPLATE" type="system.StatusCode"/>
      <var name="INVALID_FILTER_ACTION" type="system.StatusCode"/>
      <var name="INVALID_GOOGLE_DOCS_URL" type="system.StatusCode"/>
      <var name="INVALID_ID_FIELD" type="system.StatusCode"/>
      <var name="INVALID_INET_ADDRESS" type="system.StatusCode"/>
      <var name="INVALID_LINEITEM_CLONE_STATE" type="system.StatusCode"/>
      <var name="INVALID_MASTER_OR_TRANSLATED_SOLUTION" type="system.StatusCode"/>
      <var name="INVALID_MESSAGE_ID_REFERENCE" type="system.StatusCode"/>
      <var name="INVALID_OPERATION" type="system.StatusCode"/>
      <var name="INVALID_OPERATOR" type="system.StatusCode"/>
      <var name="INVALID_OR_NULL_FOR_RESTRICTED_PICKLIST" type="system.StatusCode"/>
      <var name="INVALID_PARTNER_NETWORK_STATUS" type="system.StatusCode"/>
      <var name="INVALID_PERSON_ACCOUNT_OPERATION" type="system.StatusCode"/>
      <var name="INVALID_READ_ONLY_USER_DML" type="system.StatusCode"/>
      <var name="INVALID_SAVE_AS_ACTIVITY_FLAG" type="system.StatusCode"/>
      <var name="INVALID_SESSION_ID" type="system.StatusCode"/>
      <var name="INVALID_SETUP_OWNER" type="system.StatusCode"/>
      <var name="INVALID_STATUS" type="system.StatusCode"/>
      <var name="INVALID_TYPE" type="system.StatusCode"/>
      <var name="INVALID_TYPE_FOR_OPERATION" type="system.StatusCode"/>
      <var name="INVALID_TYPE_ON_FIELD_IN_RECORD" type="system.StatusCode"/>
      <var name="IP_RANGE_LIMIT_EXCEEDED" type="system.StatusCode"/>
      <var name="LICENSE_LIMIT_EXCEEDED" type="system.StatusCode"/>
      <var name="LIGHT_PORTAL_USER_EXCEPTION" type="system.StatusCode"/>
      <var name="LIMIT_EXCEEDED" type="system.StatusCode"/>
      <var name="MALFORMED_ID" type="system.StatusCode"/>
      <var name="MANAGER_NOT_DEFINED" type="system.StatusCode"/>
      <var name="MASSMAIL_RETRY_LIMIT_EXCEEDED" type="system.StatusCode"/>
      <var name="MASS_MAIL_LIMIT_EXCEEDED" type="system.StatusCode"/>
      <var name="MAXIMUM_CCEMAILS_EXCEEDED" type="system.StatusCode"/>
      <var name="MAXIMUM_DASHBOARD_COMPONENTS_EXCEEDED" type="system.StatusCode"/>
      <var name="MAXIMUM_HIERARCHY_LEVELS_REACHED" type="system.StatusCode"/>
      <var name="MAXIMUM_SIZE_OF_ATTACHMENT" type="system.StatusCode"/>
      <var name="MAXIMUM_SIZE_OF_DOCUMENT" type="system.StatusCode"/>
      <var name="MAX_ACTIONS_PER_RULE_EXCEEDED" type="system.StatusCode"/>
      <var name="MAX_ACTIVE_RULES_EXCEEDED" type="system.StatusCode"/>
      <var name="MAX_APPROVAL_STEPS_EXCEEDED" type="system.StatusCode"/>
      <var name="MAX_FORMULAS_PER_RULE_EXCEEDED" type="system.StatusCode"/>
      <var name="MAX_RULES_EXCEEDED" type="system.StatusCode"/>
      <var name="MAX_RULE_ENTRIES_EXCEEDED" type="system.StatusCode"/>
      <var name="MAX_TASK_DESCRIPTION_EXCEEEDED" type="system.StatusCode"/>
      <var name="MAX_TM_RULES_EXCEEDED" type="system.StatusCode"/>
      <var name="MAX_TM_RULE_ITEMS_EXCEEDED" type="system.StatusCode"/>
      <var name="MERGE_FAILED" type="system.StatusCode"/>
      <var name="MISSING_ARGUMENT" type="system.StatusCode"/>
      <var name="MIXED_DML_OPERATION" type="system.StatusCode"/>
      <var name="NONUNIQUE_SHIPPING_ADDRESS" type="system.StatusCode"/>
      <var name="NO_APPLICABLE_PROCESS" type="system.StatusCode"/>
      <var name="NO_ATTACHMENT_PERMISSION" type="system.StatusCode"/>
      <var name="NO_INACTIVE_DIVISION_MEMBERS" type="system.StatusCode"/>
      <var name="NO_MASS_MAIL_PERMISSION" type="system.StatusCode"/>
      <var name="NUMBER_OUTSIDE_VALID_RANGE" type="system.StatusCode"/>
      <var name="NUM_HISTORY_FIELDS_BY_SOBJECT_EXCEEDED" type="system.StatusCode"/>
      <var name="OPTED_OUT_OF_MASS_MAIL" type="system.StatusCode"/>
      <var name="OP_WITH_INVALID_USER_TYPE_EXCEPTION" type="system.StatusCode"/>
      <var name="PACKAGE_LICENSE_REQUIRED" type="system.StatusCode"/>
      <var name="PORTAL_NO_ACCESS" type="system.StatusCode"/>
      <var name="PORTAL_USER_ALREADY_EXISTS_FOR_CONTACT" type="system.StatusCode"/>
      <var name="PRIVATE_CONTACT_ON_ASSET" type="system.StatusCode"/>
      <var name="RECORD_IN_USE_BY_WORKFLOW" type="system.StatusCode"/>
      <var name="REQUEST_RUNNING_TOO_LONG" type="system.StatusCode"/>
      <var name="REQUIRED_FEATURE_MISSING" type="system.StatusCode"/>
      <var name="REQUIRED_FIELD_MISSING" type="system.StatusCode"/>
      <var name="SELF_REFERENCE_FROM_TRIGGER" type="system.StatusCode"/>
      <var name="SHARE_NEEDED_FOR_CHILD_OWNER" type="system.StatusCode"/>
      <var name="SINGLE_EMAIL_LIMIT_EXCEEDED" type="system.StatusCode"/>
      <var name="STANDARD_PRICE_NOT_DEFINED" type="system.StatusCode"/>
      <var name="STORAGE_LIMIT_EXCEEDED" type="system.StatusCode"/>
      <var name="STRING_TOO_LONG" type="system.StatusCode"/>
      <var name="TABSET_LIMIT_EXCEEDED" type="system.StatusCode"/>
      <var name="TEMPLATE_NOT_ACTIVE" type="system.StatusCode"/>
      <var name="TERRITORY_REALIGN_IN_PROGRESS" type="system.StatusCode"/>
      <var name="TEXT_DATA_OUTSIDE_SUPPORTED_CHARSET" type="system.StatusCode"/>
      <var name="TOO_MANY_APEX_REQUESTS" type="system.StatusCode"/>
      <var name="TOO_MANY_ENUM_VALUE" type="system.StatusCode"/>
      <var name="TRANSFER_REQUIRES_READ" type="system.StatusCode"/>
      <var name="UNABLE_TO_LOCK_ROW" type="system.StatusCode"/>
      <var name="UNAVAILABLE_RECORDTYPE_EXCEPTION" type="system.StatusCode"/>
      <var name="UNDELETE_FAILED" type="system.StatusCode"/>
      <var name="UNKNOWN_EXCEPTION" type="system.StatusCode"/>
      <var name="UNSPECIFIED_EMAIL_ADDRESS" type="system.StatusCode"/>
      <var name="UNSUPPORTED_APEX_TRIGGER_OPERATON" type="system.StatusCode"/>
      <var name="UNVERIFIED_SENDER_ADDRESS" type="system.StatusCode"/>
      <var name="USER_OWNS_PORTAL_ACCOUNT_EXCEPTION" type="system.StatusCode"/>
      <var name="USER_WITH_APEX_SHARES_EXCEPTION" type="system.StatusCode"/>
      <var name="WEBLINK_SIZE_LIMIT_EXCEEDED" type="system.StatusCode"/>
      <var name="WRONG_CONTROLLER_TYPE" type="system.StatusCode"/>
    </vars>
    </type>
    <type name="system.Test" type="CLASS" serializable="true">
      <method name="invokePage" isStatic="true" returnType="Component.apex.page">
        <param type="System.PageReference"/>
      </method>
      <method name="isRunningTest" isStatic="true" returnType="Boolean"/>
      <method name="setCurrentPage" isStatic="true" returnType="void">
        <param type="Object"/>
      </method>
      <method name="setCurrentPageReference" isStatic="true" returnType="void">
        <param type="Object"/>
      </method>
      <method name="setFixedSearchResults" isStatic="true" returnType="void">
        <param type="LIST&lt;String&gt;"/>
      </method>
      <method name="setReadOnlyApplicationMode" isStatic="true" returnType="void">
        <param type="Boolean"/>
      </method>
      <method name="startTest" isStatic="true" returnType="void"/>
      <method name="stopTest" isStatic="true" returnType="void"/>
    <vars>
    </vars>
    </type>
    <type name="system.Type" type="CLASS" serializable="true">
      <method name="forName" isStatic="true" returnType="system.Type">
        <param type="String"/>
        <param type="String"/>
      </method>
      <method name="forName" isStatic="true" returnType="system.Type">
        <param type="String"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="system.Url" type="CLASS" serializable="true">
      <method name="getAuthority" isStatic="false" returnType="String"/>
      <method name="getCurrentRequestUrl" isStatic="true" returnType="system.Url"/>
      <method name="getDefaultPort" isStatic="false" returnType="Integer"/>
      <method name="getFile" isStatic="false" returnType="String"/>
      <method name="getHost" isStatic="false" returnType="String"/>
      <method name="getPath" isStatic="false" returnType="String"/>
      <method name="getPort" isStatic="false" returnType="Integer"/>
      <method name="getProtocol" isStatic="false" returnType="String"/>
      <method name="getQuery" isStatic="false" returnType="String"/>
      <method name="getRef" isStatic="false" returnType="String"/>
      <method name="getSalesforceBaseUrl" isStatic="true" returnType="system.Url"/>
      <method name="getUserInfo" isStatic="false" returnType="String"/>
      <method name="sameFile" isStatic="false" returnType="Boolean">
        <param type="system.Url"/>
      </method>
      <method name="toExternalForm" isStatic="false" returnType="String"/>
      <constructor>
        <param type="String"/>
        <param type="String"/>
        <param type="Integer"/>
        <param type="String"/>
      </constructor>
      <constructor>
        <param type="String"/>
        <param type="String"/>
        <param type="String"/>
      </constructor>
      <constructor>
        <param type="system.Url"/>
        <param type="String"/>
      </constructor>
      <constructor>
        <param type="String"/>
      </constructor>
    <vars>
    </vars>
    </type>
    <type name="system.UserInfo" type="CLASS" serializable="true">
      <method name="getDefaultCurrency" isStatic="true" returnType="String"/>
      <method name="getFirstName" isStatic="true" returnType="String"/>
      <method name="getLanguage" isStatic="true" returnType="String"/>
      <method name="getLastName" isStatic="true" returnType="String"/>
      <method name="getLocale" isStatic="true" returnType="String"/>
      <method name="getName" isStatic="true" returnType="String"/>
      <method name="getOrganizationId" isStatic="true" returnType="String"/>
      <method name="getOrganizationName" isStatic="true" returnType="String"/>
      <method name="getProfileId" isStatic="true" returnType="String"/>
      <method name="getSessionId" isStatic="true" returnType="String"/>
      <method name="getUiTheme" isStatic="true" returnType="String"/>
      <method name="getUiThemeDisplayed" isStatic="true" returnType="String"/>
      <method name="getUserId" isStatic="true" returnType="String"/>
      <method name="getUserName" isStatic="true" returnType="String"/>
      <method name="getUserRoleId" isStatic="true" returnType="String"/>
      <method name="getUserType" isStatic="true" returnType="String"/>
      <method name="isCurrentUserLicensed" isStatic="true" returnType="Boolean">
        <param type="String"/>
      </method>
      <method name="isMultiCurrencyOrganization" isStatic="true" returnType="Boolean"/>
    <vars>
    </vars>
    </type>
    <type name="system.XmlTag" type="ENUM" serializable="true">
      <method name="values" isStatic="false" returnType="LIST&lt;system.XmlTag&gt;"/>
    <vars>
      <var name="ATTRIBUTE" type="system.XmlTag"/>
      <var name="CDATA" type="system.XmlTag"/>
      <var name="CHARACTERS" type="system.XmlTag"/>
      <var name="COMMENT" type="system.XmlTag"/>
      <var name="DTD" type="system.XmlTag"/>
      <var name="END_DOCUMENT" type="system.XmlTag"/>
      <var name="END_ELEMENT" type="system.XmlTag"/>
      <var name="ENTITY_DECLARATION" type="system.XmlTag"/>
      <var name="ENTITY_REFERENCE" type="system.XmlTag"/>
      <var name="NAMESPACE" type="system.XmlTag"/>
      <var name="NOTATION_DECLARATION" type="system.XmlTag"/>
      <var name="PROCESSING_INSTRUCTION" type="system.XmlTag"/>
      <var name="SPACE" type="system.XmlTag"/>
      <var name="START_DOCUMENT" type="system.XmlTag"/>
      <var name="START_ELEMENT" type="system.XmlTag"/>
    </vars>
    </type>
  </namespace>
  <namespace name="apexpages">
    <type name="ApexPages.IdeaStandardController" serializable="true">
      <method name="addFields" isStatic="false" returnType="void" doc="Add a reference to each field whose name is specified in list of strings so it is retrieved when the record is loaded by the controller.">
        <param type="LIST&lt;String&gt;" doc="fieldNames"/>
      </method>
      <method name="addFields" isStatic="false" returnType="void" doc="Add a reference to each field whose name is specified in list of strings so it is retrieved when the record is loaded by the controller.">
        <param type="LIST&lt;String&gt;" doc="fieldNames"/>
      </method>
      <method name="cancel" isStatic="false" returnType="System.PageReference" doc="Cancel changes; returning returl"/>
      <method name="cancel" isStatic="false" returnType="System.PageReference" doc="Cancel changes; returning returl"/>
      <method name="delete" isStatic="false" returnType="System.PageReference" doc="Delete a record"/>
      <method name="delete" isStatic="false" returnType="System.PageReference" doc="Delete a record"/>
      <method name="edit" isStatic="false" returnType="System.PageReference" doc="Edit a record"/>
      <method name="edit" isStatic="false" returnType="System.PageReference" doc="Edit a record"/>
      <method name="getCommentList" isStatic="false" returnType="LIST&lt;IdeaComment&gt;" doc="Get the comments for this idea"/>
      <method name="getId" isStatic="false" returnType="String" doc="Get the ID for the subject record"/>
      <method name="getId" isStatic="false" returnType="String" doc="Get the ID for the subject record"/>
      <method name="getRecord" isStatic="false" returnType="SObject" doc="Get the subject record"/>
      <method name="getRecord" isStatic="false" returnType="SObject" doc="Get the subject record"/>
      <method name="getSubject" isStatic="false" returnType="SObject" doc="DEPRECATED.  Use getRecord"/>
      <method name="getSubject" isStatic="false" returnType="SObject" doc="DEPRECATED.  Use getRecord"/>
      <method name="reset" isStatic="false" returnType="void" doc="Reset the controller to reload the subject record on next access"/>
      <method name="reset" isStatic="false" returnType="void" doc="Reset the controller to reload the subject record on next access"/>
      <method name="save" isStatic="false" returnType="System.PageReference" doc="Save any modified or new records"/>
      <method name="save" isStatic="false" returnType="System.PageReference" doc="Save any modified or new records"/>
      <method name="view" isStatic="false" returnType="System.PageReference" doc="Get View URL for a record"/>
      <method name="view" isStatic="false" returnType="System.PageReference" doc="Get View URL for a record"/>
    <vars>
    </vars>
    </type>
    <type name="ApexPages.IdeaStandardSetController" serializable="true">
      <method name="addFields" isStatic="false" returnType="void" doc="Add a reference to each field whose name is specified in list of strings so it is retrieved when the record is loaded by the controller.">
        <param type="LIST&lt;String&gt;" doc="fieldNames"/>
      </method>
      <method name="addFields" isStatic="false" returnType="void" doc="Add a reference to each field whose name is specified in list of strings so it is retrieved when the record is loaded by the controller.">
        <param type="LIST&lt;String&gt;" doc="fieldNames"/>
      </method>
      <method name="cancel" isStatic="false" returnType="System.PageReference" doc="Cancel changes; returning returl"/>
      <method name="cancel" isStatic="false" returnType="System.PageReference" doc="Cancel changes; returning returl"/>
      <method name="first" isStatic="false" returnType="void" doc="First"/>
      <method name="first" isStatic="false" returnType="void" doc="First"/>
      <method name="getCompleteResult" isStatic="false" returnType="Boolean" doc="Indicate whether there are more records than the max record limit"/>
      <method name="getCompleteResult" isStatic="false" returnType="Boolean" doc="Indicate whether there are more records than the max record limit"/>
      <method name="getFilterId" isStatic="false" returnType="String" doc="Return the filter ID"/>
      <method name="getFilterId" isStatic="false" returnType="String" doc="Return the filter ID"/>
      <method name="getHasNext" isStatic="false" returnType="Boolean" doc="Indicate whether there are any more records"/>
      <method name="getHasNext" isStatic="false" returnType="Boolean" doc="Indicate whether there are any more records"/>
      <method name="getHasPrevious" isStatic="false" returnType="Boolean" doc="Indicate whether there are previous records"/>
      <method name="getHasPrevious" isStatic="false" returnType="Boolean" doc="Indicate whether there are previous records"/>
      <method name="getIdeaList" isStatic="false" returnType="LIST&lt;Idea&gt;" doc="Get the standard list of ideas"/>
      <method name="getListViewOptions" isStatic="false" returnType="LIST&lt;System.SelectOption&gt;" doc="Return The set of listviews available to the current user"/>
      <method name="getListViewOptions" isStatic="false" returnType="LIST&lt;System.SelectOption&gt;" doc="Return The set of listviews available to the current user"/>
      <method name="getPageNumber" isStatic="false" returnType="Integer" doc="Return the pagenumber"/>
      <method name="getPageNumber" isStatic="false" returnType="Integer" doc="Return the pagenumber"/>
      <method name="getPageSize" isStatic="false" returnType="Integer" doc="Return the page size"/>
      <method name="getPageSize" isStatic="false" returnType="Integer" doc="Return the page size"/>
      <method name="getRecord" isStatic="false" returnType="SObject" doc="Get the subject record"/>
      <method name="getRecord" isStatic="false" returnType="SObject" doc="Get the subject record"/>
      <method name="getRecords" isStatic="false" returnType="LIST&lt;SObject&gt;" doc="Get the records"/>
      <method name="getRecords" isStatic="false" returnType="LIST&lt;SObject&gt;" doc="Get the records"/>
      <method name="getResultSize" isStatic="false" returnType="Integer" doc="Return the result size"/>
      <method name="getResultSize" isStatic="false" returnType="Integer" doc="Return the result size"/>
      <method name="getSelected" isStatic="false" returnType="LIST&lt;SObject&gt;" doc="Get the selected records"/>
      <method name="getSelected" isStatic="false" returnType="LIST&lt;SObject&gt;" doc="Get the selected records"/>
      <method name="last" isStatic="false" returnType="void" doc="Last"/>
      <method name="last" isStatic="false" returnType="void" doc="Last"/>
      <method name="next" isStatic="false" returnType="void" doc="Next"/>
      <method name="next" isStatic="false" returnType="void" doc="Next"/>
      <method name="previous" isStatic="false" returnType="void" doc="Previous"/>
      <method name="previous" isStatic="false" returnType="void" doc="Previous"/>
      <method name="reset" isStatic="false" returnType="void" doc="Reset the controller to reload the subject record on next access"/>
      <method name="reset" isStatic="false" returnType="void" doc="Reset the controller to reload the subject record on next access"/>
      <method name="save" isStatic="false" returnType="System.PageReference" doc="Save any modified or new records"/>
      <method name="save" isStatic="false" returnType="System.PageReference" doc="Save any modified or new records"/>
      <method name="setFilterId" isStatic="false" returnType="void" doc="Set the filter ID">
        <param type="String" doc="filterId"/>
      </method>
      <method name="setFilterId" isStatic="false" returnType="void" doc="Set the filter ID">
        <param type="String" doc="filterId"/>
      </method>
      <method name="setPageNumber" isStatic="false" returnType="void" doc="Set the page number">
        <param type="Integer" doc="pageNumber"/>
      </method>
      <method name="setPageNumber" isStatic="false" returnType="void" doc="Set the page number">
        <param type="Integer" doc="pageNumber"/>
      </method>
      <method name="setPageSize" isStatic="false" returnType="void" doc="Set the page size">
        <param type="Integer" doc="pageSize"/>
      </method>
      <method name="setPageSize" isStatic="false" returnType="void" doc="Set the page size">
        <param type="Integer" doc="pageSize"/>
      </method>
      <method name="setSelected" isStatic="false" returnType="void" doc="Set the selected records">
        <param type="LIST&lt;SObject&gt;" doc="selected"/>
      </method>
      <method name="setSelected" isStatic="false" returnType="void" doc="Set the selected records">
        <param type="LIST&lt;SObject&gt;" doc="selected"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="ApexPages.KnowledgeArticleVersionStandardController" serializable="true">
      <method name="addFields" isStatic="false" returnType="void" doc="Add a reference to each field whose name is specified in list of strings so it is retrieved when the record is loaded by the controller.">
        <param type="LIST&lt;String&gt;" doc="fieldNames"/>
      </method>
      <method name="addFields" isStatic="false" returnType="void" doc="Add a reference to each field whose name is specified in list of strings so it is retrieved when the record is loaded by the controller.">
        <param type="LIST&lt;String&gt;" doc="fieldNames"/>
      </method>
      <method name="cancel" isStatic="false" returnType="System.PageReference" doc="Cancel changes; returning returl"/>
      <method name="cancel" isStatic="false" returnType="System.PageReference" doc="Cancel changes; returning returl"/>
      <method name="delete" isStatic="false" returnType="System.PageReference" doc="Delete a record"/>
      <method name="edit" isStatic="false" returnType="System.PageReference" doc="Edit a record"/>
      <method name="getId" isStatic="false" returnType="String" doc="Get the ID for the subject record"/>
      <method name="getId" isStatic="false" returnType="String" doc="Get the ID for the subject record"/>
      <method name="getRecord" isStatic="false" returnType="SObject" doc="Get the subject record"/>
      <method name="getRecord" isStatic="false" returnType="SObject" doc="Get the subject record"/>
      <method name="getSourceId" isStatic="false" returnType="String" doc="Get the ID for the source object record when creating a new article from another object"/>
      <method name="getSubject" isStatic="false" returnType="SObject" doc="DEPRECATED.  Use getRecord"/>
      <method name="getSubject" isStatic="false" returnType="SObject" doc="DEPRECATED.  Use getRecord"/>
      <method name="reset" isStatic="false" returnType="void" doc="Reset the controller to reload the subject record on next access"/>
      <method name="reset" isStatic="false" returnType="void" doc="Reset the controller to reload the subject record on next access"/>
      <method name="save" isStatic="false" returnType="System.PageReference" doc="Save any modified or new records"/>
      <method name="selectDataCategory" isStatic="false" returnType="void" doc="Select a default data category for the specified data category group when creating a new article">
        <param type="String" doc="categoryGroup"/>
        <param type="String" doc="category"/>
      </method>
      <method name="view" isStatic="false" returnType="System.PageReference" doc="Get View URL for a record"/>
      <method name="view" isStatic="false" returnType="System.PageReference" doc="Get View URL for a record"/>
      <constructor>
        <param type="SObject"/>
      </constructor>
    <vars>
    </vars>
    </type>
    <type name="ApexPages.Message">
      <method name="getComponentLabel" isStatic="false" returnType="String" doc="Get the message label"/>
      <method name="getDetail" isStatic="false" returnType="String" doc="Get the message detail"/>
      <method name="getSeverity" isStatic="false" returnType="ApexPages.Severity" doc="Get the message severity"/>
      <method name="getSummary" isStatic="false" returnType="String" doc="Get the message summary"/>
      <constructor>
        <param type="ApexPages.Severity"/>
        <param type="String"/>
        <param type="String"/>
      </constructor>
      <constructor>
        <param type="ApexPages.Severity"/>
        <param type="String"/>
      </constructor>
    <vars>
    </vars>
    </type>
    <type name="apexpages.PageReference" aliasFor="System.PageReference">
    </type>
    <type name="apexpages.SelectOption" aliasFor="System.SelectOption">
    </type>
    <type name="ApexPages.StandardController" serializable="true">
      <method name="addFields" isStatic="false" returnType="void" doc="Add a reference to each field whose name is specified in list of strings so it is retrieved when the record is loaded by the controller.">
        <param type="LIST&lt;String&gt;" doc="fieldNames"/>
      </method>
      <method name="cancel" isStatic="false" returnType="System.PageReference" doc="Cancel changes; returning returl"/>
      <method name="delete" isStatic="false" returnType="System.PageReference" doc="Delete a record"/>
      <method name="edit" isStatic="false" returnType="System.PageReference" doc="Edit a record"/>
      <method name="getId" isStatic="false" returnType="String" doc="Get the ID for the subject record"/>
      <method name="getRecord" isStatic="false" returnType="SObject" doc="Get the subject record"/>
      <method name="getSubject" isStatic="false" returnType="SObject" doc="DEPRECATED.  Use getRecord"/>
      <method name="reset" isStatic="false" returnType="void" doc="Reset the controller to reload the subject record on next access"/>
      <method name="save" isStatic="false" returnType="System.PageReference" doc="Save any modified or new records"/>
      <method name="view" isStatic="false" returnType="System.PageReference" doc="Get View URL for a record"/>
      <constructor>
        <param type="SObject"/>
      </constructor>
    <vars>
    </vars>
    </type>
    <type name="ApexPages.StandardSetController" serializable="true">
      <method name="addFields" isStatic="false" returnType="void" doc="Add a reference to each field whose name is specified in list of strings so it is retrieved when the record is loaded by the controller.">
        <param type="LIST&lt;String&gt;" doc="fieldNames"/>
      </method>
      <method name="cancel" isStatic="false" returnType="System.PageReference" doc="Cancel changes; returning returl"/>
      <method name="first" isStatic="false" returnType="void" doc="First"/>
      <method name="getCompleteResult" isStatic="false" returnType="Boolean" doc="Indicate whether there are more records than the max record limit"/>
      <method name="getFilterId" isStatic="false" returnType="String" doc="Return the filter ID"/>
      <method name="getHasNext" isStatic="false" returnType="Boolean" doc="Indicate whether there are any more records"/>
      <method name="getHasPrevious" isStatic="false" returnType="Boolean" doc="Indicate whether there are previous records"/>
      <method name="getListViewOptions" isStatic="false" returnType="LIST&lt;System.SelectOption&gt;" doc="Return The set of listviews available to the current user"/>
      <method name="getPageNumber" isStatic="false" returnType="Integer" doc="Return the pagenumber"/>
      <method name="getPageSize" isStatic="false" returnType="Integer" doc="Return the page size"/>
      <method name="getRecord" isStatic="false" returnType="SObject" doc="Get the subject record"/>
      <method name="getRecords" isStatic="false" returnType="LIST&lt;SObject&gt;" doc="Get the records"/>
      <method name="getResultSize" isStatic="false" returnType="Integer" doc="Return the result size"/>
      <method name="getSelected" isStatic="false" returnType="LIST&lt;SObject&gt;" doc="Get the selected records"/>
      <method name="last" isStatic="false" returnType="void" doc="Last"/>
      <method name="next" isStatic="false" returnType="void" doc="Next"/>
      <method name="previous" isStatic="false" returnType="void" doc="Previous"/>
      <method name="reset" isStatic="false" returnType="void" doc="Reset the controller to reload the subject record on next access"/>
      <method name="save" isStatic="false" returnType="System.PageReference" doc="Save any modified or new records"/>
      <method name="setFilterId" isStatic="false" returnType="void" doc="Set the filter ID">
        <param type="String" doc="filterId"/>
      </method>
      <method name="setPageNumber" isStatic="false" returnType="void" doc="Set the page number">
        <param type="Integer" doc="pageNumber"/>
      </method>
      <method name="setPageSize" isStatic="false" returnType="void" doc="Set the page size">
        <param type="Integer" doc="pageSize"/>
      </method>
      <method name="setSelected" isStatic="false" returnType="void" doc="Set the selected records">
        <param type="LIST&lt;SObject&gt;" doc="selected"/>
      </method>
      <constructor>
        <param type="Database.QueryLocator"/>
      </constructor>
      <constructor>
        <param type="LIST&lt;SObject&gt;"/>
      </constructor>
    <vars>
    </vars>
    </type>
    <type name="ApexPages.Action" type="CLASS" serializable="true">
      <method name="getExpression" isStatic="false" returnType="String"/>
      <method name="invoke" isStatic="false" returnType="System.PageReference"/>
      <constructor>
        <param type="String"/>
      </constructor>
    <vars>
    </vars>
    </type>
    <type name="ApexPages.Component" type="CLASS" serializable="true">
      <method name="getComponentById" isStatic="false" returnType="ApexPages.Component">
        <param type="String"/>
      </method>
    <vars>
      <var name="childComponents" type="LIST&lt;ApexPages.Component&gt;"/>
      <var name="componentIterations" type="LIST&lt;ApexPages.ComponentIteration&gt;"/>
      <var name="expressions" type="ApexPages.expressions"/>
      <var name="facets" type="ApexPages.facets"/>
      <var name="id" type="String"/>
      <var name="parent" type="ApexPages.Component"/>
      <var name="rendered" type="Boolean"/>
    </vars>
    </type>
    <type name="ApexPages.ComponentIteration" type="CLASS" serializable="true">
      <method name="getComponentById" isStatic="false" returnType="ApexPages.Component">
        <param type="String"/>
      </method>
    <vars>
      <var name="childComponents" type="LIST&lt;ApexPages.Component&gt;"/>
      <var name="iterationValue" type="Object"/>
      <var name="parent" type="ApexPages.Component"/>
    </vars>
    </type>
    <type name="ApexPages.Severity" type="ENUM" serializable="true">
      <method name="values" isStatic="false" returnType="LIST&lt;ApexPages.Severity&gt;"/>
    <vars>
      <var name="CONFIRM" type="ApexPages.Severity"/>
      <var name="ERROR" type="ApexPages.Severity"/>
      <var name="FATAL" type="ApexPages.Severity"/>
      <var name="INFO" type="ApexPages.Severity"/>
      <var name="WARNING" type="ApexPages.Severity"/>
    </vars>
    </type>
  </namespace>
  <namespace name="approval">
    <type name="Approval.ProcessRequest">
      <method name="getComments" isStatic="false" returnType="String"/>
      <method name="getNextApproverIds" isStatic="false" returnType="LIST&lt;Id&gt;"/>
      <method name="setComments" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="setNextApproverIds" isStatic="false" returnType="void">
        <param type="LIST&lt;Id&gt;"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="Approval.ProcessResult">
      <method name="getActorIds" isStatic="false" returnType="LIST&lt;Id&gt;"/>
      <method name="getEntityId" isStatic="false" returnType="String"/>
      <method name="getErrors" isStatic="false" returnType="LIST&lt;Database.Error&gt;"/>
      <method name="getInstanceId" isStatic="false" returnType="String"/>
      <method name="getInstanceStatus" isStatic="false" returnType="String"/>
      <method name="getNewWorkitemIds" isStatic="false" returnType="LIST&lt;Id&gt;"/>
      <method name="isSuccess" isStatic="false" returnType="Boolean"/>
    <vars>
    </vars>
    </type>
    <type name="Approval.ProcessSubmitRequest">
      <method name="getComments" isStatic="false" returnType="String"/>
      <method name="getNextApproverIds" isStatic="false" returnType="LIST&lt;Id&gt;"/>
      <method name="getObjectId" isStatic="false" returnType="String"/>
      <method name="setComments" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="setNextApproverIds" isStatic="false" returnType="void">
        <param type="LIST&lt;Id&gt;"/>
      </method>
      <method name="setObjectId" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <constructor/>
    <vars>
    </vars>
    </type>
    <type name="Approval.ProcessWorkitemRequest">
      <method name="getAction" isStatic="false" returnType="String"/>
      <method name="getComments" isStatic="false" returnType="String"/>
      <method name="getNextApproverIds" isStatic="false" returnType="LIST&lt;Id&gt;"/>
      <method name="getWorkitemId" isStatic="false" returnType="String"/>
      <method name="setAction" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="setComments" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="setNextApproverIds" isStatic="false" returnType="void">
        <param type="LIST&lt;Id&gt;"/>
      </method>
      <method name="setWorkitemId" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <constructor/>
    <vars>
    </vars>
    </type>
  </namespace>
  <namespace name="database">
    <type name="Database.Batchable" type="INTERFACE">
      <method name="execute" isStatic="false" returnType="void">
        <param type="Database.BatchableContext"/>
        <param type="LIST&lt;t&gt;"/>
      </method>
      <method name="finish" isStatic="false" returnType="void">
        <param type="Database.BatchableContext"/>
      </method>
      <method name="start" isStatic="false" returnType="system.Iterable">
        <param type="Database.BatchableContext"/>
      </method>
    </type>
    <type name="Database.DeleteResult">
      <method name="getErrors" isStatic="false" returnType="LIST&lt;Database.Error&gt;"/>
      <method name="getId" isStatic="false" returnType="Id"/>
      <method name="isSuccess" isStatic="false" returnType="Boolean"/>
    <vars>
    </vars>
    </type>
    <type name="Database.EmptyRecycleBinResult">
      <method name="getErrors" isStatic="false" returnType="LIST&lt;Database.Error&gt;"/>
      <method name="getId" isStatic="false" returnType="Id"/>
      <method name="isSuccess" isStatic="false" returnType="Boolean"/>
    <vars>
    </vars>
    </type>
    <type name="Database.Error">
      <method name="getFields" isStatic="false" returnType="LIST&lt;String&gt;"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStatusCode" isStatic="false" returnType="system.StatusCode"/>
    <vars>
    </vars>
    </type>
    <type name="Database.LeadConvert">
      <method name="getAccountId" isStatic="false" returnType="Id"/>
      <method name="getContactId" isStatic="false" returnType="Id"/>
      <method name="getConvertedStatus" isStatic="false" returnType="String"/>
      <method name="getLeadId" isStatic="false" returnType="Id"/>
      <method name="getOpportunityName" isStatic="false" returnType="String"/>
      <method name="getOwnerId" isStatic="false" returnType="Id"/>
      <method name="isDoNotCreateOpportunity" isStatic="false" returnType="Boolean"/>
      <method name="isOverwriteLeadSource" isStatic="false" returnType="Boolean"/>
      <method name="isSendNotificationEmail" isStatic="false" returnType="Boolean"/>
      <method name="setAccountId" isStatic="false" returnType="void">
        <param type="Id"/>
      </method>
      <method name="setContactId" isStatic="false" returnType="void">
        <param type="Id"/>
      </method>
      <method name="setConvertedStatus" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="setDoNotCreateOpportunity" isStatic="false" returnType="void">
        <param type="Boolean"/>
      </method>
      <method name="setLeadId" isStatic="false" returnType="void">
        <param type="Id"/>
      </method>
      <method name="setOpportunityName" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="setOverwriteLeadSource" isStatic="false" returnType="void">
        <param type="Boolean"/>
      </method>
      <method name="setOwnerId" isStatic="false" returnType="void">
        <param type="Id"/>
      </method>
      <method name="setSendNotificationEmail" isStatic="false" returnType="void">
        <param type="Boolean"/>
      </method>
      <constructor/>
    <vars>
    </vars>
    </type>
    <type name="Database.LeadConvertResult">
      <method name="getAccountId" isStatic="false" returnType="Id"/>
      <method name="getContactId" isStatic="false" returnType="Id"/>
      <method name="getErrors" isStatic="false" returnType="LIST&lt;Database.Error&gt;"/>
      <method name="getLeadId" isStatic="false" returnType="Id"/>
      <method name="getOpportunityId" isStatic="false" returnType="Id"/>
      <method name="isSuccess" isStatic="false" returnType="Boolean"/>
    <vars>
    </vars>
    </type>
    <type name="Database.QueryLocator">
      <method name="getQuery" isStatic="false" returnType="String" doc="Gets the underlying query for this QueryLocator"/>
      <method name="iterator" isStatic="false" returnType="Database.QueryLocatorIterator" doc="Gets an iterator over the results of this QueryLocator"/>
    <vars>
    </vars>
    </type>
    <type name="Database.SaveResult" serializable="true">
      <method name="getErrors" isStatic="false" returnType="LIST&lt;Database.Error&gt;"/>
      <method name="getId" isStatic="false" returnType="Id"/>
      <method name="isSuccess" isStatic="false" returnType="Boolean"/>
    <vars>
    </vars>
    </type>
    <type name="Database.UndeleteResult">
      <method name="getErrors" isStatic="false" returnType="LIST&lt;Database.Error&gt;"/>
      <method name="getId" isStatic="false" returnType="Id"/>
      <method name="isSuccess" isStatic="false" returnType="Boolean"/>
    <vars>
    </vars>
    </type>
    <type name="Database.UpsertResult">
      <method name="getErrors" isStatic="false" returnType="LIST&lt;Database.Error&gt;"/>
      <method name="getId" isStatic="false" returnType="Id"/>
      <method name="isCreated" isStatic="false" returnType="Boolean"/>
      <method name="isSuccess" isStatic="false" returnType="Boolean"/>
    <vars>
    </vars>
    </type>
    <type name="Database.Batchable" type="INTERFACE" serializable="true">
      <method name="execute" isStatic="false" returnType="void">
        <param type="Database.BatchableContext"/>
        <param type="LIST&lt;t&gt;"/>
      </method>
      <method name="finish" isStatic="false" returnType="void">
        <param type="Database.BatchableContext"/>
      </method>
      <method name="start" isStatic="false" returnType="system.Iterable">
        <param type="Database.BatchableContext"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="Database.BatchableContext" type="INTERFACE" serializable="true">
      <method name="getChildJobId" isStatic="false" returnType="Id"/>
      <method name="getJobId" isStatic="false" returnType="Id"/>
    <vars>
    </vars>
    </type>
    <type name="Database.BatchableContextImpl" type="CLASS" serializable="true">
      <method name="getChildJobId" isStatic="false" returnType="Id"/>
      <method name="getJobId" isStatic="false" returnType="Id"/>
    <vars>
    </vars>
    </type>
    <type name="Database.DMLOptions" type="CLASS" serializable="true">
      <constructor/>
    <vars>
      <var name="AllowFieldTruncation" type="Boolean"/>
      <var name="AssignmentRuleHeader" type="Database.DMLOptions.AssignmentRuleHeader"/>
      <var name="EmailHeader" type="Database.DMLOptions.EmailHeader"/>
      <var name="LocaleOptions" type="String"/>
      <var name="OptAllOrNone" type="Boolean"/>
    </vars>
    </type>
    <type name="Database.DMLOptions.EmailHeader" type="CLASS" serializable="true">
    <vars>
      <var name="TriggerAutoResponseEmail" type="Boolean"/>
      <var name="TriggerOtherEmail" type="Boolean"/>
      <var name="TriggerUserEmail" type="Boolean"/>
    </vars>
    </type>
    <type name="Database.DMLOptions.AssignmentRuleHeader" type="CLASS" serializable="true">
    <vars>
      <var name="AssignmentRuleId" type="String"/>
      <var name="UseDefaultRule" type="Boolean"/>
    </vars>
    </type>
    <type name="Database.QueryLocatorChunkIterator" type="CLASS" serializable="true">
      <method name="hasNext" isStatic="false" returnType="Boolean"/>
      <method name="next" isStatic="false" returnType="LIST&lt;SObject&gt;"/>
    <vars>
    </vars>
    </type>
    <type name="Database.QueryLocatorIterator" type="CLASS" serializable="true">
      <method name="hasNext" isStatic="false" returnType="Boolean"/>
      <method name="next" isStatic="false" returnType="SObject"/>
    <vars>
    </vars>
    </type>
  </namespace>
  <namespace name="dom">
    <type name="dom.Document">
      <method name="createRootElement" isStatic="false" returnType="dom.XmlNode" doc="Create root element node. name can not be null. if namespace is not null and prefix is null, namespace is set as default ns">
        <param type="String" doc="name"/>
        <param type="String" doc="namespace"/>
        <param type="String" doc="prefix"/>
      </method>
      <method name="getRootElement" isStatic="false" returnType="dom.XmlNode" doc="Return root element node. null, root node is not created yet"/>
      <method name="load" isStatic="false" returnType="void" doc="parse and load the specified XML">
        <param type="String" doc="xml"/>
      </method>
      <method name="toXmlString" isStatic="false" returnType="String" doc="returns the XML as string"/>
      <constructor>
      </constructor>
    <vars>
    </vars>
    </type>
    <type name="dom.XmlNode">
      <method name="addChildElement" isStatic="false" returnType="dom.XmlNode" doc="Creates a child element node. name can not be null. if namespace is not null and prefix is null, namespace is set as default ns">
        <param type="String" doc="name"/>
        <param type="String" doc="namespace"/>
        <param type="String" doc="prefix"/>
      </method>
      <method name="addCommentNode" isStatic="false" returnType="dom.XmlNode" doc="Creates a child comment node. text can not be null.">
        <param type="String" doc="text"/>
      </method>
      <method name="addTextNode" isStatic="false" returnType="dom.XmlNode" doc="Creates a child text node. text can not be null.">
        <param type="String" doc="text"/>
      </method>
      <method name="getAttribute" isStatic="false" returnType="String" doc="get raw attribute value. eg: 'foo:bar' ">
        <param type="String" doc="key"/>
        <param type="String" doc="keyNamespace"/>
      </method>
      <method name="getAttributeCount" isStatic="false" returnType="Integer" doc="get attribute count."/>
      <method name="getAttributeKeyAt" isStatic="false" returnType="String" doc="get attribute key at the given index.">
        <param type="Integer" doc="index"/>
      </method>
      <method name="getAttributeKeyNsAt" isStatic="false" returnType="String" doc="get attribute key namespace at the given index.">
        <param type="Integer" doc="index"/>
      </method>
      <method name="getAttributeValue" isStatic="false" returnType="String" doc="get attribute value.">
        <param type="String" doc="key"/>
        <param type="String" doc="keyNamespace"/>
      </method>
      <method name="getAttributeValueNs" isStatic="false" returnType="String" doc="get attribute namespace.">
        <param type="String" doc="key"/>
        <param type="String" doc="keyNamespace"/>
      </method>
      <method name="getChildElement" isStatic="false" returnType="dom.XmlNode" doc="Returns the child with specified name and namespace">
        <param type="String" doc="name"/>
        <param type="String" doc="namespace"/>
      </method>
      <method name="getChildElements" isStatic="false" returnType="LIST&lt;dom.XmlNode&gt;" doc="Returns the child ELEMENTS of this node"/>
      <method name="getChildren" isStatic="false" returnType="LIST&lt;dom.XmlNode&gt;" doc="Returns the child nodes of this node"/>
      <method name="getName" isStatic="false" returnType="String" doc="Returns the name of the element"/>
      <method name="getNamespace" isStatic="false" returnType="String" doc="Returns the namespace of the element"/>
      <method name="getNamespaceFor" isStatic="false" returnType="String" doc="Returns the namespace of the element">
        <param type="String" doc="prefix"/>
      </method>
      <method name="getNodeType" isStatic="false" returnType="Dom.XmlNodeType" doc="Returns enumeration code that indicates the type of the XmlNode."/>
      <method name="getParent" isStatic="false" returnType="dom.XmlNode" doc="Returns the parent of this element"/>
      <method name="getPrefixFor" isStatic="false" returnType="String" doc="Returns the prefix for of the given namespace. Input namespace should not be null.">
        <param type="String" doc="namespace"/>
      </method>
      <method name="getText" isStatic="false" returnType="String" doc="returns the text."/>
      <method name="removeAttribute" isStatic="false" returnType="Boolean" doc="remove attribute with the given key and namespace.">
        <param type="String" doc="key"/>
        <param type="String" doc="keyNamespace"/>
      </method>
      <method name="removeChild" isStatic="false" returnType="Boolean" doc="removes the child node">
        <param type="APEX_OBJECT" doc="child"/>
      </method>
      <method name="setAttribute" isStatic="false" returnType="void" doc="Sets attribute on the element.">
        <param type="String" doc="key"/>
        <param type="String" doc="value"/>
      </method>
      <method name="setAttributeNs" isStatic="false" returnType="void" doc="Sets attribute on the element.">
        <param type="String" doc="key"/>
        <param type="String" doc="value"/>
        <param type="String" doc="keyNamespace"/>
        <param type="String" doc="valueNamespace"/>
      </method>
      <method name="setNamespace" isStatic="false" returnType="void" doc="Returns the namespace of the element">
        <param type="String" doc="prefix"/>
        <param type="String" doc="namespace"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="Dom.XmlNodeType" type="ENUM" serializable="true">
      <method name="values" isStatic="false" returnType="LIST&lt;Dom.XmlNodeType&gt;"/>
    <vars>
      <var name="COMMENT" type="Dom.XmlNodeType"/>
      <var name="ELEMENT" type="Dom.XmlNodeType"/>
      <var name="TEXT" type="Dom.XmlNodeType"/>
    </vars>
    </type>
  </namespace>
  <namespace name="messaging">
    <type name="Messaging.Email">
      <method name="getBccSender" isStatic="false" returnType="Boolean"/>
      <method name="getEmailPriority" isStatic="false" returnType="String"/>
      <method name="getReplyTo" isStatic="false" returnType="String"/>
      <method name="getSaveAsActivity" isStatic="false" returnType="Boolean"/>
      <method name="getSenderDisplayName" isStatic="false" returnType="String"/>
      <method name="getSubject" isStatic="false" returnType="String"/>
      <method name="getUseSignature" isStatic="false" returnType="Boolean"/>
      <method name="setBccSender" isStatic="false" returnType="void">
        <param type="Boolean"/>
      </method>
      <method name="setEmailPriority" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="setReplyTo" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="setSaveAsActivity" isStatic="false" returnType="void">
        <param type="Boolean"/>
      </method>
      <method name="setSenderDisplayName" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="setSubject" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="setUseSignature" isStatic="false" returnType="void">
        <param type="Boolean"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="Messaging.EmailAttachment">
      <method name="getBody" isStatic="false" returnType="Blob"/>
      <method name="getContentType" isStatic="false" returnType="String"/>
      <method name="getFileName" isStatic="false" returnType="String"/>
      <method name="setBody" isStatic="false" returnType="void">
        <param type="Blob"/>
      </method>
      <method name="setContentType" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="setFileName" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <constructor/>
    <vars>
    </vars>
    </type>
    <type name="Messaging.EmailFileAttachment">
      <method name="getBody" isStatic="false" returnType="Blob"/>
      <method name="getContentType" isStatic="false" returnType="String"/>
      <method name="getFileName" isStatic="false" returnType="String"/>
      <method name="getInline" isStatic="false" returnType="Boolean"/>
      <method name="setBody" isStatic="false" returnType="void">
        <param type="Blob"/>
      </method>
      <method name="setContentType" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="setFileName" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="setInline" isStatic="false" returnType="void">
        <param type="Boolean"/>
      </method>
      <constructor/>
    <vars>
    </vars>
    </type>
    <type name="Messaging.InboundEmailHandler" type="INTERFACE">
      <method name="handleInboundEmail" isStatic="false" returnType="Messaging.InboundEmailResult"/>
    </type>
    <type name="Messaging.MassEmailMessage">
      <method name="getBccSender" isStatic="false" returnType="Boolean"/>
      <method name="getDescription" isStatic="false" returnType="String"/>
      <method name="getEmailPriority" isStatic="false" returnType="String"/>
      <method name="getReplyTo" isStatic="false" returnType="String"/>
      <method name="getSaveAsActivity" isStatic="false" returnType="Boolean"/>
      <method name="getSenderDisplayName" isStatic="false" returnType="String"/>
      <method name="getSubject" isStatic="false" returnType="String"/>
      <method name="getTargetObjectIds" isStatic="false" returnType="LIST&lt;Id&gt;"/>
      <method name="getTemplateId" isStatic="false" returnType="Id"/>
      <method name="getUseSignature" isStatic="false" returnType="Boolean"/>
      <method name="getWhatIds" isStatic="false" returnType="LIST&lt;Id&gt;"/>
      <method name="setBccSender" isStatic="false" returnType="void">
        <param type="Boolean"/>
      </method>
      <method name="setDescription" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="setEmailPriority" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="setReplyTo" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="setSaveAsActivity" isStatic="false" returnType="void">
        <param type="Boolean"/>
      </method>
      <method name="setSenderDisplayName" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="setSubject" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="setTargetObjectIds" isStatic="false" returnType="void">
        <param type="LIST&lt;Id&gt;"/>
      </method>
      <method name="setTemplateId" isStatic="false" returnType="void">
        <param type="Id"/>
      </method>
      <method name="setUseSignature" isStatic="false" returnType="void">
        <param type="Boolean"/>
      </method>
      <method name="setWhatIds" isStatic="false" returnType="void">
        <param type="LIST&lt;Id&gt;"/>
      </method>
      <constructor/>
    <vars>
    </vars>
    </type>
    <type name="Messaging.SendEmailError">
      <method name="getFields" isStatic="false" returnType="LIST&lt;String&gt;"/>
      <method name="getMessage" isStatic="false" returnType="String"/>
      <method name="getStatusCode" isStatic="false" returnType="system.StatusCode"/>
      <method name="getTargetObjectId" isStatic="false" returnType="String"/>
    <vars>
    </vars>
    </type>
    <type name="Messaging.SendEmailResult">
      <method name="getErrors" isStatic="false" returnType="LIST&lt;Messaging.SendEmailError&gt;"/>
      <method name="isSuccess" isStatic="false" returnType="Boolean"/>
    <vars>
    </vars>
    </type>
    <type name="Messaging.SingleEmailMessage">
      <method name="getBccAddresses" isStatic="false" returnType="LIST&lt;String&gt;"/>
      <method name="getBccSender" isStatic="false" returnType="Boolean"/>
      <method name="getCcAddresses" isStatic="false" returnType="LIST&lt;String&gt;"/>
      <method name="getCharset" isStatic="false" returnType="String"/>
      <method name="getDocumentAttachments" isStatic="false" returnType="LIST&lt;String&gt;"/>
      <method name="getEmailPriority" isStatic="false" returnType="String"/>
      <method name="getFileAttachments" isStatic="false" returnType="LIST&lt;Messaging.EmailFileAttachment&gt;"/>
      <method name="getHtmlBody" isStatic="false" returnType="String"/>
      <method name="getInReplyTo" isStatic="false" returnType="String"/>
      <method name="getOrgWideEmailAddressId" isStatic="false" returnType="Id"/>
      <method name="getPlainTextBody" isStatic="false" returnType="String"/>
      <method name="getReferences" isStatic="false" returnType="String"/>
      <method name="getReplyTo" isStatic="false" returnType="String"/>
      <method name="getSaveAsActivity" isStatic="false" returnType="Boolean"/>
      <method name="getSenderDisplayName" isStatic="false" returnType="String"/>
      <method name="getSubject" isStatic="false" returnType="String"/>
      <method name="getTargetObjectId" isStatic="false" returnType="Id"/>
      <method name="getTemplateId" isStatic="false" returnType="Id"/>
      <method name="getToAddresses" isStatic="false" returnType="LIST&lt;String&gt;"/>
      <method name="getUseSignature" isStatic="false" returnType="Boolean"/>
      <method name="getWhatId" isStatic="false" returnType="Id"/>
      <method name="isUserMail" isStatic="false" returnType="Boolean"/>
      <method name="setBccAddresses" isStatic="false" returnType="void">
        <param type="LIST&lt;String&gt;"/>
      </method>
      <method name="setBccSender" isStatic="false" returnType="void">
        <param type="Boolean"/>
      </method>
      <method name="setCcAddresses" isStatic="false" returnType="void">
        <param type="LIST&lt;String&gt;"/>
      </method>
      <method name="setCharset" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="setDocumentAttachments" isStatic="false" returnType="void">
        <param type="LIST&lt;String&gt;"/>
      </method>
      <method name="setEmailPriority" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="setFileAttachments" isStatic="false" returnType="void">
        <param type="LIST&lt;Messaging.EmailFileAttachment&gt;"/>
      </method>
      <method name="setHtmlBody" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="setInReplyTo" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="setOrgWideEmailAddressId" isStatic="false" returnType="void">
        <param type="Id"/>
      </method>
      <method name="setPlainTextBody" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="setReferences" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="setReplyTo" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="setSaveAsActivity" isStatic="false" returnType="void">
        <param type="Boolean"/>
      </method>
      <method name="setSenderDisplayName" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="setSubject" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="setTargetObjectId" isStatic="false" returnType="void">
        <param type="Id"/>
      </method>
      <method name="setTemplateId" isStatic="false" returnType="void">
        <param type="Id"/>
      </method>
      <method name="setToAddresses" isStatic="false" returnType="void">
        <param type="LIST&lt;String&gt;"/>
      </method>
      <method name="setUseSignature" isStatic="false" returnType="void">
        <param type="Boolean"/>
      </method>
      <method name="setWhatId" isStatic="false" returnType="void">
        <param type="Id"/>
      </method>
      <constructor/>
    <vars>
    </vars>
    </type>
    <type name="Messaging.InboundEmail" type="CLASS" serializable="true">
    <vars>
      <var name="binaryAttachments" type="LIST&lt;Messaging.InboundEmail.BinaryAttachment&gt;"/>
      <var name="ccAddresses" type="LIST&lt;String&gt;"/>
      <var name="fromAddress" type="String"/>
      <var name="fromName" type="String"/>
      <var name="headers" type="LIST&lt;Messaging.InboundEmail.Header&gt;"/>
      <var name="htmlBody" type="String"/>
      <var name="htmlBodyIsTruncated" type="Boolean"/>
      <var name="inReplyTo" type="String"/>
      <var name="messageId" type="String"/>
      <var name="plainTextBody" type="String"/>
      <var name="plainTextBodyIsTruncated" type="Boolean"/>
      <var name="references" type="LIST&lt;String&gt;"/>
      <var name="replyTo" type="String"/>
      <var name="subject" type="String"/>
      <var name="textAttachments" type="LIST&lt;Messaging.InboundEmail.TextAttachment&gt;"/>
      <var name="toAddresses" type="LIST&lt;String&gt;"/>
    </vars>
    </type>
    <type name="Messaging.InboundEmail.BinaryAttachment" type="CLASS" serializable="true">
    <vars>
      <var name="body" type="Blob"/>
      <var name="fileName" type="String"/>
      <var name="mimeTypeSubType" type="String"/>
    </vars>
    </type>
    <type name="Messaging.InboundEmail.TextAttachment" type="CLASS" serializable="true">
    <vars>
      <var name="body" type="String"/>
      <var name="bodyIsTruncated" type="Boolean"/>
      <var name="charset" type="String"/>
      <var name="fileName" type="String"/>
      <var name="mimeTypeSubType" type="String"/>
    </vars>
    </type>
    <type name="Messaging.InboundEmail.Header" type="CLASS" serializable="true">
    <vars>
      <var name="name" type="String"/>
      <var name="value" type="String"/>
    </vars>
    </type>
    <type name="Messaging.InboundEmailResult" type="CLASS" serializable="true">
      <constructor/>
    <vars>
      <var name="message" type="String"/>
      <var name="success" type="Boolean"/>
    </vars>
    </type>
    <type name="Messaging.InboundEnvelope" type="CLASS" serializable="true">
    <vars>
      <var name="fromAddress" type="String"/>
      <var name="toAddress" type="String"/>
    </vars>
    </type>
  </namespace>
  <namespace name="package">
    <type name="Package.Version">
      <method name="isGreaterThan" isStatic="false" returnType="Boolean" doc="Return whether this version represents a later version than the one given">
        <param type="Package.Version" doc="other"/>
      </method>
      <method name="isGreaterThanOrEqual" isStatic="false" returnType="Boolean" doc="Return whether this version represents the same or later version than the one given">
        <param type="Package.Version" doc="other"/>
      </method>
      <method name="isLessThan" isStatic="false" returnType="Boolean" doc="Return whether this version represents an earlier version than the one given">
        <param type="Package.Version" doc="other"/>
      </method>
      <method name="isLessThanOrEqual" isStatic="false" returnType="Boolean" doc="Return whether this version represents the same or earlier version than the one given">
        <param type="Package.Version" doc="other"/>
      </method>
    <vars>
    </vars>
    </type>
  </namespace>
  <namespace name="schema">
    <type name="Schema.ChildRelationship">
      <method name="getChildSObject" isStatic="false" returnType="Schema.SObjectType"/>
      <method name="getField" isStatic="false" returnType="Schema.SObjectField"/>
      <method name="getRelationshipName" isStatic="false" returnType="String"/>
      <method name="isCascadeDelete" isStatic="false" returnType="Boolean"/>
      <method name="isDeprecatedAndHidden" isStatic="false" returnType="Boolean"/>
      <method name="isRestrictedDelete" isStatic="false" returnType="Boolean"/>
    <vars>
    </vars>
    </type>
    <type name="Schema.DataCategory">
      <method name="getChildCategories" isStatic="false" returnType="LIST&lt;Schema.DataCategory&gt;"/>
      <method name="getLabel" isStatic="false" returnType="String"/>
      <method name="getName" isStatic="false" returnType="String"/>
    <vars>
    </vars>
    </type>
    <type name="Schema.DataCategoryGroupSobjectTypePair">
      <method name="getDataCategoryGroupName" isStatic="false" returnType="String"/>
      <method name="getSobject" isStatic="false" returnType="String"/>
      <method name="setDataCategoryGroupName" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <method name="setSobject" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <constructor/>
    <vars>
    </vars>
    </type>
    <type name="Schema.DescribeDataCategoryGroupResult">
      <method name="getCategoryCount" isStatic="false" returnType="Integer"/>
      <method name="getDescription" isStatic="false" returnType="String"/>
      <method name="getLabel" isStatic="false" returnType="String"/>
      <method name="getName" isStatic="false" returnType="String"/>
      <method name="getSobject" isStatic="false" returnType="String"/>
    <vars>
    </vars>
    </type>
    <type name="Schema.DescribeDataCategoryGroupStructureResult">
      <method name="getDescription" isStatic="false" returnType="String"/>
      <method name="getLabel" isStatic="false" returnType="String"/>
      <method name="getName" isStatic="false" returnType="String"/>
      <method name="getSobject" isStatic="false" returnType="String"/>
      <method name="getTopCategories" isStatic="false" returnType="LIST&lt;Schema.DataCategory&gt;"/>
    <vars>
    </vars>
    </type>
    <type name="Schema.DescribeFieldResult">
      <method name="getByteLength" isStatic="false" returnType="Integer"/>
      <method name="getCalculatedFormula" isStatic="false" returnType="String"/>
      <method name="getController" isStatic="false" returnType="Schema.SObjectField"/>
      <method name="getDefaultValue" isStatic="false" returnType="Object"/>
      <method name="getDefaultValueFormula" isStatic="false" returnType="String"/>
      <method name="getDigits" isStatic="false" returnType="Integer"/>
      <method name="getInlineHelpText" isStatic="false" returnType="String"/>
      <method name="getLabel" isStatic="false" returnType="String"/>
      <method name="getLength" isStatic="false" returnType="Integer"/>
      <method name="getLocalName" isStatic="false" returnType="String"/>
      <method name="getName" isStatic="false" returnType="String"/>
      <method name="getPicklistValues" isStatic="false" returnType="LIST&lt;Schema.PicklistEntry&gt;"/>
      <method name="getPrecision" isStatic="false" returnType="Integer"/>
      <method name="getReferenceTo" isStatic="false" returnType="LIST&lt;Schema.SObjectType&gt;"/>
      <method name="getRelationshipName" isStatic="false" returnType="String"/>
      <method name="getRelationshipOrder" isStatic="false" returnType="Integer"/>
      <method name="getScale" isStatic="false" returnType="Integer"/>
      <method name="getSoapType" isStatic="false" returnType="Schema.SoapType"/>
      <method name="getSobjectField" isStatic="false" returnType="Schema.SObjectField"/>
      <method name="getType" isStatic="false" returnType="Schema.DisplayType"/>
      <method name="isAccessible" isStatic="false" returnType="Boolean"/>
      <method name="isAutoNumber" isStatic="false" returnType="Boolean"/>
      <method name="isCalculated" isStatic="false" returnType="Boolean"/>
      <method name="isCascadeDelete" isStatic="false" returnType="Boolean"/>
      <method name="isCaseSensitive" isStatic="false" returnType="Boolean"/>
      <method name="isCreateable" isStatic="false" returnType="Boolean"/>
      <method name="isCustom" isStatic="false" returnType="Boolean"/>
      <method name="isDefaultedOnCreate" isStatic="false" returnType="Boolean"/>
      <method name="isDependentPicklist" isStatic="false" returnType="Boolean"/>
      <method name="isDeprecatedAndHidden" isStatic="false" returnType="Boolean"/>
      <method name="isExternalId" isStatic="false" returnType="Boolean"/>
      <method name="isFilterable" isStatic="false" returnType="Boolean"/>
      <method name="isGroupable" isStatic="false" returnType="Boolean"/>
      <method name="isHtmlFormatted" isStatic="false" returnType="Boolean"/>
      <method name="isIdLookup" isStatic="false" returnType="Boolean"/>
      <method name="isNameField" isStatic="false" returnType="Boolean"/>
      <method name="isNamePointing" isStatic="false" returnType="Boolean"/>
      <method name="isNillable" isStatic="false" returnType="Boolean"/>
      <method name="isRestrictedDelete" isStatic="false" returnType="Boolean"/>
      <method name="isRestrictedPicklist" isStatic="false" returnType="Boolean"/>
      <method name="isSortable" isStatic="false" returnType="Boolean"/>
      <method name="isUnique" isStatic="false" returnType="Boolean"/>
      <method name="isUpdateable" isStatic="false" returnType="Boolean"/>
      <method name="isWriteRequiresMasterRead" isStatic="false" returnType="Boolean"/>
    <vars>
    </vars>
    </type>
    <type name="Schema.DescribeSObjectResult">
      <method name="getChildRelationships" isStatic="false" returnType="LIST&lt;Schema.ChildRelationship&gt;"/>
      <method name="getFields" isStatic="false" returnType="Schema.SObjectTypeFields"/>
      <method name="getKeyPrefix" isStatic="false" returnType="String"/>
      <method name="getLabel" isStatic="false" returnType="String"/>
      <method name="getLabelPlural" isStatic="false" returnType="String"/>
      <method name="getLocalName" isStatic="false" returnType="String"/>
      <method name="getName" isStatic="false" returnType="String"/>
      <method name="getRecordTypeInfos" isStatic="false" returnType="LIST&lt;Schema.RecordTypeInfo&gt;"/>
      <method name="getRecordTypeInfosById" isStatic="false" returnType="MAP&lt;Id,Schema.RecordTypeInfo&gt;"/>
      <method name="getRecordTypeInfosByName" isStatic="false" returnType="MAP&lt;String,Schema.RecordTypeInfo&gt;"/>
      <method name="getSObjectType" isStatic="false" returnType="Schema.SObjectType"/>
      <method name="isAccessible" isStatic="false" returnType="Boolean"/>
      <method name="isCreateable" isStatic="false" returnType="Boolean"/>
      <method name="isCustom" isStatic="false" returnType="Boolean"/>
      <method name="isCustomSetting" isStatic="false" returnType="Boolean"/>
      <method name="isDeletable" isStatic="false" returnType="Boolean"/>
      <method name="isDeprecatedAndHidden" isStatic="false" returnType="Boolean"/>
      <method name="isFeedEnabled" isStatic="false" returnType="Boolean"/>
      <method name="isMergeable" isStatic="false" returnType="Boolean"/>
      <method name="isQueryable" isStatic="false" returnType="Boolean"/>
      <method name="isSearchable" isStatic="false" returnType="Boolean"/>
      <method name="isUndeletable" isStatic="false" returnType="Boolean"/>
      <method name="isUpdateable" isStatic="false" returnType="Boolean"/>
    <vars>
    </vars>
    </type>
    <type name="Schema.PicklistEntry">
      <method name="getLabel" isStatic="false" returnType="String"/>
      <method name="getValue" isStatic="false" returnType="String"/>
      <method name="isActive" isStatic="false" returnType="Boolean"/>
      <method name="isDefaultValue" isStatic="false" returnType="Boolean"/>
    <vars>
    </vars>
    </type>
    <type name="Schema.RecordTypeInfo">
      <method name="getName" isStatic="false" returnType="String"/>
      <method name="getRecordTypeId" isStatic="false" returnType="Id"/>
      <method name="isAvailable" isStatic="false" returnType="Boolean"/>
      <method name="isDefaultRecordTypeMapping" isStatic="false" returnType="Boolean"/>
    <vars>
    </vars>
    </type>
    <type name="Schema.SObjectField" serializable="true">
      <method name="getDescribe" isStatic="false" returnType="Schema.DescribeFieldResult" doc="Return the describe information for this field"/>
    <vars>
    </vars>
    </type>
    <type name="Schema.SObjectType" serializable="true">
      <method name="getDescribe" isStatic="false" returnType="Schema.DescribeSObjectResult" doc="Return the describe information for this SObject type"/>
      <method name="newSObject" isStatic="false" returnType="SObject" doc="Factory method to construct a new SObject of this type, with a valid Id">
        <param type="Id" doc="id"/>
      </method>
      <method name="newSObject" isStatic="false" returnType="SObject" doc="Factory method to construct a new SObject of this type"/>
    <vars>
    </vars>
    </type>
    <type name="Schema.DisplayType" type="ENUM" serializable="true">
      <method name="values" isStatic="false" returnType="LIST&lt;Schema.DisplayType&gt;"/>
    <vars>
      <var name="ANYTYPE" type="Schema.DisplayType"/>
      <var name="BASE64" type="Schema.DisplayType"/>
      <var name="BOOLEAN" type="Schema.DisplayType"/>
      <var name="COMBOBOX" type="Schema.DisplayType"/>
      <var name="CURRENCY" type="Schema.DisplayType"/>
      <var name="DATACATEGORYGROUPREFERENCE" type="Schema.DisplayType"/>
      <var name="DATE" type="Schema.DisplayType"/>
      <var name="DATETIME" type="Schema.DisplayType"/>
      <var name="DOUBLE" type="Schema.DisplayType"/>
      <var name="EMAIL" type="Schema.DisplayType"/>
      <var name="ENCRYPTEDSTRING" type="Schema.DisplayType"/>
      <var name="ID" type="Schema.DisplayType"/>
      <var name="INTEGER" type="Schema.DisplayType"/>
      <var name="MULTIPICKLIST" type="Schema.DisplayType"/>
      <var name="PERCENT" type="Schema.DisplayType"/>
      <var name="PHONE" type="Schema.DisplayType"/>
      <var name="PICKLIST" type="Schema.DisplayType"/>
      <var name="REFERENCE" type="Schema.DisplayType"/>
      <var name="STRING" type="Schema.DisplayType"/>
      <var name="TEXTAREA" type="Schema.DisplayType"/>
      <var name="TIME" type="Schema.DisplayType"/>
      <var name="URL" type="Schema.DisplayType"/>
    </vars>
    </type>
    <type name="Schema.SoapType" type="ENUM" serializable="true">
      <method name="values" isStatic="false" returnType="LIST&lt;Schema.SoapType&gt;"/>
    <vars>
      <var name="ANYTYPE" type="Schema.SoapType"/>
      <var name="BASE64BINARY" type="Schema.SoapType"/>
      <var name="BOOLEAN" type="Schema.SoapType"/>
      <var name="DATE" type="Schema.SoapType"/>
      <var name="DATETIME" type="Schema.SoapType"/>
      <var name="DOUBLE" type="Schema.SoapType"/>
      <var name="ID" type="Schema.SoapType"/>
      <var name="INTEGER" type="Schema.SoapType"/>
      <var name="STRING" type="Schema.SoapType"/>
      <var name="TIME" type="Schema.SoapType"/>
    </vars>
    </type>
  </namespace>
  <namespace name="support">
  </namespace>
  <namespace name="answers">
  </namespace>
  <namespace name="apex">
    <type name="Apex.Stack" type="CLASS" serializable="true">
      <method name="empty" isStatic="false" returnType="Boolean"/>
      <method name="peek" isStatic="false" returnType="String"/>
      <method name="pop" isStatic="false" returnType="String"/>
      <method name="push" isStatic="false" returnType="void">
        <param type="String"/>
      </method>
      <constructor/>
    <vars>
    </vars>
    </type>
  </namespace>
  <namespace name="apexlumentest">
  </namespace>
  <namespace name="apexpage">
  </namespace>
  <namespace name="apexpagetest">
  </namespace>
  <namespace name="apexpagetrusted">
  </namespace>
  <namespace name="apexuitest">
  </namespace>
  <namespace name="appexchange">
  </namespace>
  <namespace name="auth">
    <type name="Auth.RegistrationHandler" type="INTERFACE" serializable="true">
      <method name="createUser" isStatic="false" returnType="User">
        <param type="Id"/>
        <param type="Auth.UserData"/>
      </method>
      <method name="updateUser" isStatic="false" returnType="void">
        <param type="Id"/>
        <param type="Id"/>
        <param type="Auth.UserData"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="Auth.UserData" type="CLASS" serializable="true">
      <constructor>
        <param type="String"/>
        <param type="String"/>
        <param type="String"/>
        <param type="String"/>
        <param type="String"/>
        <param type="String"/>
        <param type="String"/>
        <param type="String"/>
        <param type="String"/>
      </constructor>
    <vars>
      <var name="email" type="String"/>
      <var name="firstName" type="String"/>
      <var name="fullName" type="String"/>
      <var name="identifier" type="String"/>
      <var name="lastName" type="String"/>
      <var name="link" type="String"/>
      <var name="locale" type="String"/>
      <var name="provider" type="String"/>
      <var name="username" type="String"/>
    </vars>
    </type>
  </namespace>
  <namespace name="branding">
  </namespace>
  <namespace name="cmp">
  </namespace>
  <namespace name="component">
  </namespace>
  <namespace name="content">
  </namespace>
  <namespace name="feedposttemplate">
  </namespace>
  <namespace name="flow">
  </namespace>
  <namespace name="ftest">
  </namespace>
  <namespace name="i18n">
  </namespace>
  <namespace name="ideastrusted">
  </namespace>
  <namespace name="interaction">
  </namespace>
  <namespace name="kbtrusted">
  </namespace>
  <namespace name="liveagent">
  </namespace>
  <namespace name="lumen">
  </namespace>
  <namespace name="lumendocs">
  </namespace>
  <namespace name="lumenide">
  </namespace>
  <namespace name="mobile">
  </namespace>
  <namespace name="mobiletest">
  </namespace>
  <namespace name="os">
  </namespace>
  <namespace name="osproto">
  </namespace>
  <namespace name="ostest">
  </namespace>
  <namespace name="packaging">
  </namespace>
  <namespace name="perms">
  </namespace>
  <namespace name="process">
    <type name="Process.Plugin" type="INTERFACE" serializable="true">
      <method name="describe" isStatic="false" returnType="Process.PluginDescribeResult"/>
      <method name="invoke" isStatic="false" returnType="Process.PluginResult">
        <param type="Process.PluginRequest"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="Process.PluginDescribeResult" type="CLASS" serializable="true">
    <vars>
      <var name="description" type="String"/>
      <var name="inputParameters" type="LIST&lt;Process.PluginDescribeResult.InputParameter&gt;"/>
      <var name="name" type="String"/>
      <var name="outputParameters" type="LIST&lt;Process.PluginDescribeResult.OutputParameter&gt;"/>
      <var name="tag" type="String"/>
    </vars>
    </type>
    <type name="Process.PluginDescribeResult.ParameterType" type="ENUM" serializable="true">
      <method name="values" isStatic="false" returnType="LIST&lt;Process.PluginDescribeResult.ParameterType&gt;"/>
    <vars>
      <var name="BOOLEAN" type="Process.PluginDescribeResult.ParameterType"/>
      <var name="DATE" type="Process.PluginDescribeResult.ParameterType"/>
      <var name="DATETIME" type="Process.PluginDescribeResult.ParameterType"/>
      <var name="DECIMAL" type="Process.PluginDescribeResult.ParameterType"/>
      <var name="DOUBLE" type="Process.PluginDescribeResult.ParameterType"/>
      <var name="FLOAT" type="Process.PluginDescribeResult.ParameterType"/>
      <var name="ID" type="Process.PluginDescribeResult.ParameterType"/>
      <var name="INTEGER" type="Process.PluginDescribeResult.ParameterType"/>
      <var name="LONG" type="Process.PluginDescribeResult.ParameterType"/>
      <var name="STRING" type="Process.PluginDescribeResult.ParameterType"/>
    </vars>
    </type>
    <type name="Process.PluginDescribeResult.InputParameter" type="CLASS" serializable="true">
      <constructor>
        <param type="String"/>
        <param type="String"/>
        <param type="Process.PluginDescribeResult.ParameterType"/>
        <param type="Boolean"/>
      </constructor>
      <constructor>
        <param type="String"/>
        <param type="Process.PluginDescribeResult.ParameterType"/>
        <param type="Boolean"/>
      </constructor>
    <vars>
      <var name="description" type="String"/>
      <var name="name" type="String"/>
      <var name="parameterType" type="Process.PluginDescribeResult.ParameterType"/>
      <var name="required" type="Boolean"/>
    </vars>
    </type>
    <type name="Process.PluginDescribeResult.OutputParameter" type="CLASS" serializable="true">
      <constructor>
        <param type="String"/>
        <param type="String"/>
        <param type="Process.PluginDescribeResult.ParameterType"/>
      </constructor>
      <constructor>
        <param type="String"/>
        <param type="Process.PluginDescribeResult.ParameterType"/>
      </constructor>
    <vars>
      <var name="description" type="String"/>
      <var name="name" type="String"/>
      <var name="parameterType" type="Process.PluginDescribeResult.ParameterType"/>
    </vars>
    </type>
    <type name="Process.PluginRequest" type="CLASS" serializable="true">
      <constructor>
        <param type="MAP&lt;String,Object&gt;"/>
      </constructor>
    <vars>
      <var name="inputParameters" type="MAP&lt;String,Object&gt;"/>
    </vars>
    </type>
    <type name="Process.PluginResult" type="CLASS" serializable="true">
      <constructor>
        <param type="String"/>
        <param type="Object"/>
      </constructor>
      <constructor>
        <param type="MAP&lt;String,Object&gt;"/>
      </constructor>
    <vars>
      <var name="outputParameters" type="MAP&lt;String,Object&gt;"/>
    </vars>
    </type>
  </namespace>
  <namespace name="quotestrusted">
  </namespace>
  <namespace name="r6">
  </namespace>
  <namespace name="r6sales">
  </namespace>
  <namespace name="r6service">
  </namespace>
  <namespace name="sales">
  </namespace>
  <namespace name="salesproto">
  </namespace>
  <namespace name="sccommunities">
  </namespace>
  <namespace name="sfdctest">
  </namespace>
  <namespace name="sfga">
  </namespace>
  <namespace name="sflma">
  </namespace>
  <namespace name="site">
    <type name="Site.UrlRewriter" type="INTERFACE" serializable="true">
      <method name="generateUrlFor" isStatic="false" returnType="LIST&lt;System.PageReference&gt;">
        <param type="LIST&lt;System.PageReference&gt;"/>
      </method>
      <method name="mapRequestUrl" isStatic="false" returnType="System.PageReference">
        <param type="System.PageReference"/>
      </method>
    <vars>
    </vars>
    </type>
  </namespace>
  <namespace name="supportproto">
  </namespace>
  <namespace name="supportui">
  </namespace>
  <namespace name="syncapi">
  </namespace>
  <namespace name="synonyms">
  </namespace>
  <namespace name="tabletproto">
  </namespace>
  <namespace name="touch">
  </namespace>
  <namespace name="(instance methods)">
    <type name="Integer" type="CLASS" serializable="true">
      <method name="addError" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="msg"/>
      </method>
      <method name="addError" isStatic="false" returnType="void">
        <param type="String" doc="msg"/>
      </method>
      <method name="format" isStatic="false" returnType="String"/>
    <vars>
    </vars>
    </type>
    <type name="Long" type="CLASS" serializable="true">
      <method name="addError" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="msg"/>
      </method>
      <method name="addError" isStatic="false" returnType="void">
        <param type="String" doc="msg"/>
      </method>
      <method name="format" isStatic="false" returnType="String"/>
      <method name="intValue" isStatic="false" returnType="Integer"/>
    <vars>
    </vars>
    </type>
    <type name="Double" type="CLASS" serializable="true">
      <method name="addError" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="msg"/>
      </method>
      <method name="addError" isStatic="false" returnType="void">
        <param type="String" doc="msg"/>
      </method>
      <method name="format" isStatic="false" returnType="String"/>
      <method name="intValue" isStatic="false" returnType="Integer"/>
      <method name="longValue" isStatic="false" returnType="Long"/>
      <method name="round" isStatic="false" returnType="Long"/>
    <vars>
    </vars>
    </type>
    <type name="Decimal" type="CLASS" serializable="true">
      <method name="abs" isStatic="false" returnType="Decimal"/>
      <method name="addError" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="msg"/>
      </method>
      <method name="addError" isStatic="false" returnType="void">
        <param type="String" doc="msg"/>
      </method>
      <method name="divide" isStatic="false" returnType="Decimal" doc="Divide this number by the divisor setting the scale of the result and rounding the value if necessary">
        <param type="Decimal" doc="divisor"/>
        <param type="Integer" doc="scale"/>
        <param type="APEX_OBJECT" doc="roundingMode"/>
      </method>
      <method name="divide" isStatic="false" returnType="Decimal" doc="Divide this number by the divisor setting the scale of the result">
        <param type="Decimal" doc="divisor"/>
        <param type="Integer" doc="scale"/>
      </method>
      <method name="doubleValue" isStatic="false" returnType="Double"/>
      <method name="format" isStatic="false" returnType="String"/>
      <method name="intValue" isStatic="false" returnType="Integer"/>
      <method name="longValue" isStatic="false" returnType="Long"/>
      <method name="pow" isStatic="false" returnType="Decimal" doc="Return value of this decimal to the given exponent">
        <param type="Integer" doc="exponent"/>
      </method>
      <method name="precision" isStatic="false" returnType="Integer" doc="Return the precision of the decimal, i.e. number of significant digits"/>
      <method name="round" isStatic="false" returnType="Long" doc="Round the number to zero decimal places using the given mode">
        <param type="system.RoundingMode" doc="roundingMode"/>
      </method>
      <method name="round" isStatic="false" returnType="Long" doc="Round the number to zero decimal places using Half-Even rounding"/>
      <method name="scale" isStatic="false" returnType="Integer" doc="Return the scale of the decimal, i.e. number of decimal places"/>
      <method name="setScale" isStatic="false" returnType="Decimal" doc="Set the scale of the number to the given number of decimal places, using the given rounding mode if necessary">
        <param type="Integer" doc="scale"/>
        <param type="system.RoundingMode" doc="roundingMode"/>
      </method>
      <method name="setScale" isStatic="false" returnType="Decimal" doc="Set the scale of the number to the given number of decimal places, using half-even rounding if necessary">
        <param type="Integer" doc="scale"/>
      </method>
      <method name="stripTrailingZeros" isStatic="false" returnType="Decimal"/>
      <method name="toPlainString" isStatic="false" returnType="String"/>
    <vars>
    </vars>
    </type>
    <type name="Time" type="CLASS" serializable="true">
      <method name="addError" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="msg"/>
      </method>
      <method name="addError" isStatic="false" returnType="void">
        <param type="String" doc="msg"/>
      </method>
      <method name="addHours" isStatic="false" returnType="Time">
        <param type="Integer" doc="hours"/>
      </method>
      <method name="addMilliseconds" isStatic="false" returnType="Time">
        <param type="Integer" doc="milliseconds"/>
      </method>
      <method name="addMinutes" isStatic="false" returnType="Time">
        <param type="Integer" doc="minutes"/>
      </method>
      <method name="addSeconds" isStatic="false" returnType="Time">
        <param type="Integer" doc="seconds"/>
      </method>
      <method name="hour" isStatic="false" returnType="Integer" doc="Return the hour of day associated with the time."/>
      <method name="millisecond" isStatic="false" returnType="Integer" doc="Return the millisecond associated with the time."/>
      <method name="minute" isStatic="false" returnType="Integer" doc="Return the minute associated with the time."/>
      <method name="second" isStatic="false" returnType="Integer" doc="Return the second associated with the time."/>
    <vars>
    </vars>
    </type>
    <type name="Date" type="CLASS" serializable="true">
      <method name="addDays" isStatic="false" returnType="Date">
        <param type="Integer" doc="days"/>
      </method>
      <method name="addError" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="msg"/>
      </method>
      <method name="addError" isStatic="false" returnType="void">
        <param type="String" doc="msg"/>
      </method>
      <method name="addMonths" isStatic="false" returnType="Date">
        <param type="Integer" doc="months"/>
      </method>
      <method name="addYears" isStatic="false" returnType="Date" doc="Return the year associated with the date.">
        <param type="Integer" doc="years"/>
      </method>
      <method name="day" isStatic="false" returnType="Integer" doc="Return the day of the month associated with the date."/>
      <method name="dayOfYear" isStatic="false" returnType="Integer" doc="Return the day of the year associated with the date."/>
      <method name="daysBetween" isStatic="false" returnType="Integer">
        <param type="Date" doc="other"/>
      </method>
      <method name="format" isStatic="false" returnType="String" doc="Format the datetime using the current user's locale, omitting seconds and timezone"/>
      <method name="isSameDay" isStatic="false" returnType="Boolean">
        <param type="Date" doc="other"/>
      </method>
      <method name="month" isStatic="false" returnType="Integer" doc="Return the month associated with the date."/>
      <method name="monthsBetween" isStatic="false" returnType="Integer">
        <param type="Date" doc="other"/>
      </method>
      <method name="toStartOfMonth" isStatic="false" returnType="Date"/>
      <method name="toStartOfWeek" isStatic="false" returnType="Date"/>
      <method name="year" isStatic="false" returnType="Integer" doc="Return the year associated with the date."/>
    <vars>
    </vars>
    </type>
    <type name="Datetime" type="CLASS" serializable="true">
      <method name="addDays" isStatic="false" returnType="Datetime" doc="Add the given number of days to the current datetime and return a new datetime">
        <param type="Integer" doc="days"/>
      </method>
      <method name="addError" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="msg"/>
      </method>
      <method name="addError" isStatic="false" returnType="void">
        <param type="String" doc="msg"/>
      </method>
      <method name="addHours" isStatic="false" returnType="Datetime">
        <param type="Integer" doc="hours"/>
      </method>
      <method name="addMinutes" isStatic="false" returnType="Datetime">
        <param type="Integer" doc="minutes"/>
      </method>
      <method name="addMonths" isStatic="false" returnType="Datetime" doc="Add the given number of months to the current datetime and return a new datetime">
        <param type="Integer" doc="months"/>
      </method>
      <method name="addSeconds" isStatic="false" returnType="Datetime">
        <param type="Integer" doc="seconds"/>
      </method>
      <method name="addYears" isStatic="false" returnType="Datetime" doc="Add the given number of years to the current datetime and return a new datetime">
        <param type="Integer" doc="years"/>
      </method>
      <method name="date" isStatic="false" returnType="Date" doc="Return the Date associated with the Datetime for the current user's timezone"/>
      <method name="dateGmt" isStatic="false" returnType="Date" doc="Return the Date associated with the Datetime for the GMT timezone"/>
      <method name="day" isStatic="false" returnType="Integer" doc="Return the day of the month associated with the Datetime for the current user's timezone"/>
      <method name="dayGmt" isStatic="false" returnType="Integer" doc="Return the day of the month associated with the Datetime for the GMT timezone"/>
      <method name="dayOfYear" isStatic="false" returnType="Integer" doc="Return the day of the year associated with the Datetime for the current user's timezone"/>
      <method name="dayOfYearGmt" isStatic="false" returnType="Integer" doc="Return the day of the year associated with the Datetime for the GMT timezone"/>
      <method name="format" isStatic="false" returnType="String" doc="Format the datetime using the supplied java style simple date format and timezone. If the supplied timezone is not understood 'GMT' will be used.">
        <param type="String" doc="dateformat"/>
        <param type="String" doc="timezone"/>
      </method>
      <method name="format" isStatic="false" returnType="String" doc="Format the datetime using the supplied java style simple date format and local timezone">
        <param type="String" doc="dateformat"/>
      </method>
      <method name="format" isStatic="false" returnType="String" doc="Format the datetime using the current user's locale, omitting seconds and timezone"/>
      <method name="formatGmt" isStatic="false" returnType="String" doc="Format the datetime using the supplied java style simple date format and 'GMT' timezone">
        <param type="String" doc="dateformat"/>
      </method>
      <method name="formatLong" isStatic="false" returnType="String" doc="Format the datetime using the current user's locale including seconds and timezone"/>
      <method name="getTime" isStatic="false" returnType="Long" doc="Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this"/>
      <method name="hour" isStatic="false" returnType="Integer" doc="Return the hour associated with the Datetime for the current user's timezone"/>
      <method name="hourGmt" isStatic="false" returnType="Integer" doc="Return the hour associated with the Datetime for the GMT timezone"/>
      <method name="isSameDay" isStatic="false" returnType="Boolean" doc="Return whether the current datetime and the given datetime are on the same day in the current user's timezone">
        <param type="Datetime" doc="other"/>
      </method>
      <method name="millisecond" isStatic="false" returnType="Integer" doc="Return the millisecond associated with the Datetime for the current user's timezone"/>
      <method name="millisecondGmt" isStatic="false" returnType="Integer" doc="Return the millisecond associated with the Datetime for the GMT timezone"/>
      <method name="minute" isStatic="false" returnType="Integer" doc="Return the minute associated with the Datetime for the current user's timezone"/>
      <method name="minuteGmt" isStatic="false" returnType="Integer" doc="Return the minute associated with the Datetime for the GMT timezone"/>
      <method name="month" isStatic="false" returnType="Integer" doc="Return the month associated with the Datetime for the current user's timezone"/>
      <method name="monthGmt" isStatic="false" returnType="Integer" doc="Return the month associated with the Datetime for the GMT timezone"/>
      <method name="second" isStatic="false" returnType="Integer" doc="Return the second associated with the Datetime for the current user's timezone"/>
      <method name="secondGmt" isStatic="false" returnType="Integer" doc="Return the second associated with the Datetime for the GMT timezone"/>
      <method name="time" isStatic="false" returnType="Time" doc="Return the Time associated with the Datetime for the current user's timezone"/>
      <method name="timeGmt" isStatic="false" returnType="Time" doc="Return the Time associated with the Datetime for the GMT timezone"/>
      <method name="year" isStatic="false" returnType="Integer" doc="Return the year associated with the Datetime for the current user's timezone"/>
      <method name="yearGmt" isStatic="false" returnType="Integer" doc="Return the year associated with the Datetime for the GMT timezone"/>
    <vars>
    </vars>
    </type>
    <type name="Boolean" type="CLASS" serializable="true">
      <method name="addError" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="msg"/>
      </method>
      <method name="addError" isStatic="false" returnType="void">
        <param type="String" doc="msg"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="String" type="CLASS" serializable="true">
      <method name="addError" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="msg"/>
      </method>
      <method name="addError" isStatic="false" returnType="void">
        <param type="String" doc="msg"/>
      </method>
      <method name="compareTo" isStatic="false" returnType="Integer">
        <param type="String" doc="str"/>
      </method>
      <method name="contains" isStatic="false" returnType="Boolean">
        <param type="String" doc="str"/>
      </method>
      <method name="endsWith" isStatic="false" returnType="Boolean">
        <param type="String" doc="str"/>
      </method>
      <method name="equals" isStatic="false" returnType="Boolean">
        <param type="String" doc="other"/>
      </method>
      <method name="equalsIgnoreCase" isStatic="false" returnType="Boolean">
        <param type="String" doc="other"/>
      </method>
      <method name="indexOf" isStatic="false" returnType="Integer">
        <param type="String" doc="str"/>
        <param type="Integer" doc="startPos"/>
      </method>
      <method name="indexOf" isStatic="false" returnType="Integer">
        <param type="String" doc="str"/>
      </method>
      <method name="lastIndexOf" isStatic="false" returnType="Integer">
        <param type="String" doc="str"/>
      </method>
      <method name="length" isStatic="false" returnType="Integer"/>
      <method name="replace" isStatic="false" returnType="String" doc="Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence.">
        <param type="String" doc="target"/>
        <param type="String" doc="replacement"/>
      </method>
      <method name="replaceAll" isStatic="false" returnType="String" doc="Replaces each substring of this string that matches the given regular expression with the given replacement.">
        <param type="String" doc="regex"/>
        <param type="String" doc="replacement"/>
      </method>
      <method name="replaceFirst" isStatic="false" returnType="String" doc="Replaces the first substring of this string that matches the given regular expression with the given replacement.">
        <param type="String" doc="regex"/>
        <param type="String" doc="replacement"/>
      </method>
      <method name="split" isStatic="false" returnType="LIST&lt;String&gt;" doc="Split the string with the given regular expression returning a list of at least one element.">
        <param type="String" doc="regex"/>
        <param type="Integer" doc="limit"/>
      </method>
      <method name="split" isStatic="false" returnType="LIST&lt;String&gt;" doc="Split the string with the given regular expression returning a list of at least one element.">
        <param type="String" doc="regex"/>
      </method>
      <method name="startsWith" isStatic="false" returnType="Boolean">
        <param type="String" doc="str"/>
      </method>
      <method name="substring" isStatic="false" returnType="String">
        <param type="Integer" doc="start"/>
        <param type="Integer" doc="end"/>
      </method>
      <method name="substring" isStatic="false" returnType="String">
        <param type="Integer" doc="start"/>
      </method>
      <method name="toLowerCase" isStatic="false" returnType="String" doc="Converts all of the characters in this String to lower case using the rules of the given locale.">
        <param type="String" doc="locale"/>
      </method>
      <method name="toLowerCase" isStatic="false" returnType="String"/>
      <method name="toUpperCase" isStatic="false" returnType="String" doc="Converts all of the characters in this String to upper case using the rules of the given locale.">
        <param type="String" doc="locale"/>
      </method>
      <method name="toUpperCase" isStatic="false" returnType="String"/>
      <method name="trim" isStatic="false" returnType="String"/>
    <vars>
    </vars>
    </type>
    <type name="Id" type="CLASS" serializable="true">
      <method name="addError" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="msg"/>
      </method>
      <method name="addError" isStatic="false" returnType="void">
        <param type="String" doc="msg"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="Blob" type="CLASS" serializable="true">
      <method name="size" isStatic="false" returnType="Integer"/>
      <method name="toString" isStatic="false" returnType="String" doc="Convert the binary object to a string using UTF-8 encoding"/>
    <vars>
    </vars>
    </type>
    <type name="CURRENCY" type="CLASS" serializable="true">
      <method name="format" isStatic="false" returnType="String"/>
      <method name="formatAmount" isStatic="false" returnType="String"/>
    <vars>
    </vars>
    </type>
    <type name="SObject" type="CLASS" serializable="true">
      <method name="addError" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="msg"/>
      </method>
      <method name="addError" isStatic="false" returnType="void">
        <param type="String" doc="msg"/>
      </method>
      <method name="clear" isStatic="false" returnType="void"/>
      <method name="clone" isStatic="false" returnType="SObject">
        <param type="Boolean" doc="preserveId"/>
        <param type="Boolean" doc="deep"/>
        <param type="Boolean" doc="preserveReadOnlyTimestamps"/>
        <param type="Boolean" doc="preserveAutoNumbers"/>
      </method>
      <method name="clone" isStatic="false" returnType="SObject">
        <param type="Boolean" doc="preserveId"/>
        <param type="Boolean" doc="deep"/>
        <param type="Boolean" doc="preserveReadOnlyTimestamps"/>
      </method>
      <method name="clone" isStatic="false" returnType="SObject">
        <param type="Boolean" doc="preserveId"/>
        <param type="Boolean" doc="deep"/>
      </method>
      <method name="clone" isStatic="false" returnType="SObject">
        <param type="Boolean" doc="preserveId"/>
      </method>
      <method name="clone" isStatic="false" returnType="SObject"/>
      <method name="get" isStatic="false" returnType="Object" doc="Return the value of the given scalar field">
        <param type="Schema.SObjectField" doc="field"/>
      </method>
      <method name="get" isStatic="false" returnType="Object" doc="Return the value of the given scalar field">
        <param type="String" doc="field"/>
      </method>
      <method name="getAll" isStatic="false" returnType="MAP&lt;String,SObject&gt;"/>
      <method name="getInstance" isStatic="false" returnType="SObject">
        <param type="String"/>
      </method>
      <method name="getInstance" isStatic="false" returnType="SObject">
        <param type="String"/>
      </method>
      <method name="getInstance" isStatic="false" returnType="SObject"/>
      <method name="getOptions" isStatic="false" returnType="Database.DMLOptions"/>
      <method name="getOrgDefaults" isStatic="false" returnType="SObject"/>
      <method name="getSObject" isStatic="false" returnType="SObject" doc="Return the value of the given relationship">
        <param type="Schema.SObjectField" doc="field"/>
      </method>
      <method name="getSObject" isStatic="false" returnType="SObject" doc="Return the value of the given relationship">
        <param type="String" doc="field"/>
      </method>
      <method name="getSObjectType" isStatic="false" returnType="Schema.SObjectType" doc="Return the runtime SObjectType identifying the type of this object"/>
      <method name="getSObjectType" isStatic="false" returnType="Schema.SObjectType"/>
      <method name="getSObjects" isStatic="false" returnType="LIST&lt;SObject&gt;" doc="Return the value of the given aggregate relationship">
        <param type="Schema.SObjectField" doc="field"/>
      </method>
      <method name="getSObjects" isStatic="false" returnType="LIST&lt;SObject&gt;" doc="Return the value of the given aggregate relationship">
        <param type="String" doc="field"/>
      </method>
      <method name="getValues" isStatic="false" returnType="SObject">
        <param type="String"/>
      </method>
      <method name="getValues" isStatic="false" returnType="SObject">
        <param type="String"/>
      </method>
      <method name="put" isStatic="false" returnType="Object" doc="Set the value of the given field, returning the previous value">
        <param type="Schema.SObjectField" doc="field"/>
        <param type="Object" doc="value"/>
      </method>
      <method name="put" isStatic="false" returnType="Object" doc="Set the value of the given field, returning the previous value">
        <param type="String" doc="field"/>
        <param type="Object" doc="value"/>
      </method>
      <method name="putSObject" isStatic="false" returnType="SObject" doc="Set the value of the given field, returning the previous value">
        <param type="Schema.SObjectField" doc="field"/>
        <param type="SObject" doc="value"/>
      </method>
      <method name="putSObject" isStatic="false" returnType="SObject" doc="Set the value of the given field, returning the previous value">
        <param type="String" doc="field"/>
        <param type="SObject" doc="value"/>
      </method>
      <method name="setOptions" isStatic="false" returnType="void">
        <param type="APEX_OBJECT" doc="options"/>
      </method>
    <vars>
    </vars>
    </type>
    <type name="LIST&lt;String&gt;" type="CLASS" serializable="true">
      <method name="add" isStatic="false" returnType="void">
        <param type="Integer" doc="index"/>
        <param type="ANY" doc="element"/>
      </method>
      <method name="add" isStatic="false" returnType="Object">
        <param type="ANY" doc="element"/>
      </method>
      <method name="addAll" isStatic="false" returnType="void">
        <param type="LIST" doc="elements"/>
      </method>
      <method name="addAll" isStatic="false" returnType="void">
        <param type="SET" doc="elements"/>
      </method>
      <method name="clear" isStatic="false" returnType="void"/>
      <method name="clone" isStatic="false" returnType="LIST&lt;String&gt;"/>
      <method name="deepClone" isStatic="false" returnType="LIST&lt;String&gt;">
        <param type="Boolean" doc="preserveId"/>
        <param type="Boolean" doc="preserveReadOnlyTimestamps"/>
        <param type="Boolean" doc="preserveAutoNumbers"/>
      </method>
      <method name="deepClone" isStatic="false" returnType="LIST&lt;String&gt;">
        <param type="Boolean" doc="preserveId"/>
        <param type="Boolean" doc="preserveReadOnlyTimestamps"/>
      </method>
      <method name="deepClone" isStatic="false" returnType="LIST&lt;String&gt;">
        <param type="Boolean" doc="preserveId"/>
      </method>
      <method name="deepClone" isStatic="false" returnType="LIST&lt;String&gt;"/>
      <method name="get" isStatic="false" returnType="Id">
        <param type="Integer" doc="index"/>
      </method>
      <method name="get" isStatic="false" returnType="SObject">
        <param type="Integer" doc="index"/>
      </method>
      <method name="get" isStatic="false" returnType="String">
        <param type="Integer" doc="index"/>
      </method>
      <method name="get" isStatic="false" returnType="String">
        <param type="Integer" doc="index"/>
      </method>
      <method name="getSObjectType" isStatic="false" returnType="Schema.SObjectType" doc="Return the runtime SObjectType identifying the SObject type of this list"/>
      <method name="isEmpty" isStatic="false" returnType="Boolean"/>
      <method name="iterator" isStatic="false" returnType="system.ListIterator" doc="Gets an iterator over this list"/>
      <method name="remove" isStatic="false" returnType="SObject">
        <param type="Integer" doc="index"/>
      </method>
      <method name="remove" isStatic="false" returnType="String">
        <param type="Integer" doc="index"/>
      </method>
      <method name="set" isStatic="false" returnType="void">
        <param type="Integer" doc="index"/>
        <param type="ANY" doc="value"/>
      </method>
      <method name="size" isStatic="false" returnType="Integer"/>
      <method name="sort" isStatic="false" returnType="void"/>
    <vars>
    </vars>
    </type>
    <type name="SET&lt;String&gt;" type="CLASS" serializable="true">
      <method name="add" isStatic="false" returnType="Boolean">
        <param type="ANY" doc="element"/>
      </method>
      <method name="addAll" isStatic="false" returnType="Boolean">
        <param type="LIST" doc="elements"/>
      </method>
      <method name="addAll" isStatic="false" returnType="Boolean">
        <param type="SET" doc="elements"/>
      </method>
      <method name="clear" isStatic="false" returnType="void"/>
      <method name="clone" isStatic="false" returnType="SET&lt;String&gt;"/>
      <method name="contains" isStatic="false" returnType="Boolean">
        <param type="ANY" doc="element"/>
      </method>
      <method name="containsAll" isStatic="false" returnType="Boolean">
        <param type="LIST" doc="elements"/>
      </method>
      <method name="containsAll" isStatic="false" returnType="Boolean">
        <param type="SET" doc="elements"/>
      </method>
      <method name="isEmpty" isStatic="false" returnType="Boolean"/>
      <method name="iterator" isStatic="false" returnType="system.ListIterator" doc="Gets an iterator over this set"/>
      <method name="remove" isStatic="false" returnType="Boolean">
        <param type="ANY" doc="element"/>
      </method>
      <method name="removeAll" isStatic="false" returnType="Boolean">
        <param type="LIST" doc="elements"/>
      </method>
      <method name="removeAll" isStatic="false" returnType="Boolean">
        <param type="SET" doc="elements"/>
      </method>
      <method name="retainAll" isStatic="false" returnType="Boolean">
        <param type="LIST" doc="elements"/>
      </method>
      <method name="retainAll" isStatic="false" returnType="Boolean">
        <param type="SET" doc="elements"/>
      </method>
      <method name="size" isStatic="false" returnType="Integer"/>
    <vars>
    </vars>
    </type>
    <type name="MAP&lt;String,String&gt;" type="CLASS" serializable="true">
      <method name="clear" isStatic="false" returnType="void"/>
      <method name="clone" isStatic="false" returnType="MAP&lt;String,String&gt;"/>
      <method name="containsKey" isStatic="false" returnType="Boolean">
        <param type="ANY" doc="key"/>
      </method>
      <method name="deepClone" isStatic="false" returnType="MAP&lt;String,String&gt;"/>
      <method name="get" isStatic="false" returnType="String">
        <param type="ANY" doc="key"/>
      </method>
      <method name="getSObjectType" isStatic="false" returnType="Schema.SObjectType" doc="Return the runtime SObjectType identifying the SObject type of this map"/>
      <method name="isEmpty" isStatic="false" returnType="Boolean"/>
      <method name="keySet" isStatic="false" returnType="SET&lt;String&gt;"/>
      <method name="put" isStatic="false" returnType="String">
        <param type="ANY" doc="key"/>
        <param type="ANY" doc="value"/>
      </method>
      <method name="putAll" isStatic="false" returnType="void">
        <param type="LIST" doc="entries"/>
      </method>
      <method name="putAll" isStatic="false" returnType="void">
        <param type="MAP" doc="entries"/>
      </method>
      <method name="remove" isStatic="false" returnType="String">
        <param type="ANY" doc="key"/>
      </method>
      <method name="size" isStatic="false" returnType="Integer"/>
      <method name="values" isStatic="false" returnType="LIST&lt;String&gt;"/>
    <vars>
    </vars>
    </type>
  </namespace>
</types>
